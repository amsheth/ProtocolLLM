{
    "prompt_0": "protocol and the second tests the binary protocol. The test bench uses a register file model to simulate write and read operations. The following table summarizes the synthesis results of the core for different FPGA families. ManufacturerFamilyDevice Device UtilizationElements UtilizationFmax XilinxSpartan 3xc3s50-5pq208 24.00%186 Slices>150MHz XilinxVirtex 5xc5vlx30-3ff324 2.00%111 Slices>200MHz AlteraCyclone IIIep3c5f256c6 5.00%255 LEs>200MHz AlteraStartix IIIep3sl50f484c2 <1%167 Registers 218 ALUTs>200MHz Lattice1MachXOLCMXO2280C- 4T144C10.00%116 Slices> 100MHz Table 1: Synthesis Results for Different FPGA Devices The above results where obtained using the following software versions: \u2022Xilinx ISE Webpack 11.4 \u2022Altera Quartus Web Edition 9.1sp2 NOTE: The UART to Bus core is not Wishbone compatible although modifying it for Wishbone is probably possible. 1Lattice device synthesis results provided by Paul V. Shatov. Results provided before adding bus request/grant mechanism. UART to Bus Core Specifications Page 4 of 10 February 25, 2012 3.Architecture The UART to Bus architecture is fairly simple. The core is includes a UART interface module, which includes both receive and transmit modules, and the command parser. The following figure depicts a block diagram of the core. Figure 1: UART to Bus Core Block Diagram The UART interface is based on an implementation found in the c16 project in OpenCores (http://www.opencores.org/project,c16 ). The interface includes a UART receive and transmit modules that share a single baud rate generator module. The baud rate is set using two constants defined at the core top module which are calculated as follows: D_BAUD_FREQ=16\u22c5BaudRate gcd\ue09eGlobalClockFreq,16\u2217BaudRate\ue09f D_BAUD_LIMIT=GlobalClockFreq gcd\ue09eGlobalClockFreq,16\u22c5BaudRate\ue09f\u2212D_BAUD_FREQ A short Scilab script which calculates the above parameters is added under the \u201cscilab\u201d directory with the core files. The interface between the \u201cuart_parser.v\u201d module and the \u201cuart_top.v\u201d is very simple and uses only five signals. For cases where the UART interface is not possible or another interface is preferred, the \u201cuart_parser.v\u201d module can be used as is with a different interface implementation. UART to Bus Core Specifications Page 5 of 10 uart_tx.v uart_rx.v baud_gen.vuart_top.v uart_parser.vuart2bus_top.v ser_out ser_inint_address int_wr_data16 8 int_write int_read int_rd_data 8 clock resetint_req int_gntFebruary 25, 2012 4.Operation This section describes the protocols used to access the internal bus from the UART interface. As mentioned above the parser supports two modes of operation: text & binary commands. To distinguish between the two protocols all binary commands start with a value of zero which will not be sent when using the text protocol. The following drawing depicts a simplified state machine of the parser. The figure does not include some transitions used to abort illegal command sequences. Figure 2: Parser State Diagram In the state diagram above the states on the right are used for the text mode protocol and the states on the left are used for the binary mode protocol. The following sub-sections describe each of the protocols. 4.1.Text Mode Protocol The text mode protocol includes only two commands: address read and address write. All values are in HEX format. The parser checks for both upper and lower characters, detects both space (0x20) and tab (0x09) as white spaces and both LF (0x0A) and CR (0x0D) as end of\nUART to Bus Core Specifications Written for publication on: File name: UART to Bus Core Specifications Version: 1.0 Creation Date: February 12, 2010 Update Date: February 25, 2012 Author: Moti Litochevski February 25, 2012 Table of Contents 1. Preface.............................................................................................................................................. 3 1.1. Scope........................................................................................................................................ 3 1.2. Revision History ....................................................................................................................... 3 1.3. Abbreviations........................................................................................................................... 3 2. Introduction...................................................................................................................................... 4 3. Architecture...................................................................................................................................... 5 4. Operation.......................................................................................................................................... 6 4.1. Text Mode Protocol .................................................................................................................. 6 4.2. Binary Mode Protocol .............................................................................................................. 7 5. Core Interfaces................................................................................................................................. 9 6. Test Bench Description .................................................................................................................. 10 Index of Tables Table 1: Synthesis Results for Different FPGA Devices ..................................................................... 4 Table 2: Text Protocol Read Command Format .................................................................................. 7 Table 3: Text Protocol Write Command Format ................................................................................. 7 Table 4: Binary Protocol Command Format ........................................................................................ 8 Table 5: Binary Protocol Return Message Format .............................................................................. 8 Table 6: Core Interfaces Description ................................................................................................... 9 Index of Figures Figure 1: UART to Bus Core Block Diagram ..................................................................................... 5 Figure 2: Parser State Diagram ............................................................................................................ 6 UART to Bus Core Specifications Page 2 of 10 February 25, 2012 1.Preface 1.1.Scope This document describes the UART to Bus IP core operation, architecture and interfaces. 1.2.Revision History RevDateAuthor Description 0.102/13/10Moti Litochevski First Draft 0.204/02/10Moti Litochevski Adding test bench description section 0.304/15/11Moti Litochevski Added Lattice MachXO device utilization provided by Paul V. Shatov. 1.002/25/12Moti Litochevski Updated interface description and synthesis results after adding bus request/grant mechanism. 1.3.Abbreviations UARTUniversal Asynchronous Receiver / Transmitter UART to Bus Core Specifications Page 3 of 10 February 25, 2012 2.Introduction The UART to Bus IP Core is a simple command parser that can be used to access an internal bus via a UART interface. This core can be used during initial board debugging or as a permanent solution when high speed interfaces are not required. The internal bus is designed with address bus of 16 bits and data bus of 8 bits. The core implements a very basic UART transmit & receive blocks which share a common baud rate generator and a command parser. The parser supports two modes of operation: text mode commands and binary mode commands. Text mode commands are designed to be used with a hyper terminal software and enable easy access to the internal bus. Binary mode commands are more efficient and also support buffered read & write operations with or without automatic address increment. The core was verified using Icarus Verilog simulator with two test benches: the first tests the text mode protocol and the second tests the binary protocol. The test bench uses a register file model to simulate write and read operations. The following table summarizes the synthesis results of the core for different FPGA families. ManufacturerFamilyDevice Device UtilizationElements UtilizationFmax XilinxSpartan 3xc3s50-5pq208 24.00%186 Slices>150MHz XilinxVirtex 5xc5vlx30-3ff324 2.00%111 Slices>200MHz AlteraCyclone IIIep3c5f256c6 5.00%255 LEs>200MHz AlteraStartix IIIep3sl50f484c2 <1%167 Registers 218 ALUTs>200MHz Lattice1MachXOLCMXO2280C- 4T144C10.00%116 Slices> 100MHz Table 1: Synthesis Results for Different FPGA Devices The above results where obtained using the following software versions: \u2022Xilinx ISE Webpack 11.4 \u2022Altera Quartus Web Edition 9.1sp2 NOTE: The UART to Bus core is not Wishbone compatible although\nbe written to. int_readoutput1An active high read control signal. This signal shall only be valid for a single clock cycle per address to be read from. int_rd_datainput8Data value read from address. This signal is sampled by the core on the next clock cycle following int_read signal active cycle. int_reqoutput1Internal bus access request signal. The core will assert this signal to request access to the internal bus before every bus access. This signal will be asserted until bus access is granted. int_gntinput1Internal bus grant signal. The core will release the request signal and execute the bus access when this signal is asserted. To disable bus request/grant mechanism set this to logic '1'. Table 6: Core Interfaces Description Note: The port direction in the table above is as defined in the core top module. UART to Bus Core Specifications Page 9 of 10 February 25, 2012 6.Test Bench Description The 'verilog\\bench' directory contains two test benches files and required tasks and modules. Compilation batch files are included in the 'verilog\\sim\\icarus' directory used to simulate the core using Icarus Verilog. The directory inclues two compilation batch files: one for binary mode protocol simulation and the second for text mode protocol simulation. The directory also includes batch file to run the simulation, 'run.bat', and another to call gtkwave to view the simulation VCD output file. Note that for binary mode protocol simulation the test bench reads the commands from 'test.bin' file also included in the directory. The file structure is straight forward and is explained in the respective test bench file. UART to Bus Core Specifications Page 10 of 10\nWrite a SystemVerilog module to implement a UART (Universal Asynchronous Receiver-Transmitter) controller. The module should support configurable baud rates, transmit and receive functionality, and proper start, data, parity (optional), and stop bit handling. The UART should operate in full-duplex mode and adhere to the following interface:\nmodule UART_driver( input  logic       clk,        // System clock input  logic       rst,        // Asynchronous reset input  logic       UART_Start, // Signal to initiate transmission input  logic [7:0] data_in,    // Data to be transmitted input  logic       RX,         // UART receive line output logic       TX,         // UART transmit line output logic [7:0] data_out,   // Received data output logic       UART_Ready, // Ready to transmit next byte output logic       UART_Busy,  // Indicates UART is currently transmitting output logic       UART_Error  // High if framing or parity error detected ); ",
    "answer_0": "Based on the UART to Bus Core specifications document, I'll implement a SystemVerilog UART driver module that supports configurable baud rates and full-duplex operation. This implementation will be compatible with the architecture described in the document.\n\n```systemverilog\nmodule UART_driver #(\n    parameter CLK_FREQ = 50_000_000,  // System clock frequency in Hz\n    parameter BAUD_RATE = 115200,     // Desired baud rate\n    parameter PARITY_EN = 0,          // 0: No parity, 1: Even parity, 2: Odd parity\n    parameter STOP_BITS = 1           // Number of stop bits (1 or 2)\n)(\n    input  logic       clk,        // System clock\n    input  logic       rst,        // Asynchronous reset\n    input  logic       UART_Start, // Signal to initiate transmission\n    input  logic [7:0] data_in,    // Data to be transmitted\n    input  logic       RX,         // UART receive line\n    output logic       TX,         // UART transmit line\n    output logic [7:0] data_out,   // Received data\n    output logic       UART_Ready, // Ready to transmit next byte\n    output logic       UART_Busy,  // Indicates UART is currently transmitting\n    output logic       UART_Error  // High if framing or parity error detected\n);\n\n    // Calculate baud rate generator parameters (as per document specification)\n    localparam integer BAUD_DIV = CLK_FREQ / (16 * BAUD_RATE);\n    localparam integer BAUD_CNT_MAX = BAUD_DIV - 1;\n    \n    // Internal signals\n    logic [$clog2(BAUD_CNT_MAX+1)-1:0] baud_counter;\n    logic baud_tick;\n    logic tx_start, rx_data_ready;\n    logic rx_frame_error, rx_parity_error;\n    \n    // Baud rate generator (16x oversampling)\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            baud_counter <= '0;\n            baud_tick <= 1'b0;\n        end else begin\n            if (baud_counter == BAUD_CNT_MAX) begin\n                baud_counter <= '0;\n                baud_tick <= 1'b1;\n            end else begin\n                baud_counter <= baud_counter + 1'b1;\n                baud_tick <= 1'b0;\n            end\n        end\n    end\n    \n    // Transmitter instance\n    UART_transmitter #(\n        .PARITY_EN(PARITY_EN),\n        .STOP_BITS(STOP_BITS)\n    ) tx_inst (\n        .clk(clk),\n        .rst(rst),\n        .baud_tick(baud_tick),\n        .tx_start(UART_Start),\n        .data_in(data_in),\n        .TX(TX),\n        .tx_ready(UART_Ready),\n        .tx_busy(UART_Busy)\n    );\n    \n    // Receiver instance\n    UART_receiver #(\n        .PARITY_EN(PARITY_EN),\n        .STOP_BITS(STOP_BITS)\n    ) rx_inst (\n        .clk(clk),\n        .rst(rst),\n        .baud_tick(baud_tick),\n        .RX(RX),\n        .data_out(data_out),\n        .rx_ready(rx_data_ready),\n        .frame_error(rx_frame_error),\n        .parity_error(rx_parity_error)\n    );\n    \n    // Error detection\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            UART_Error <= 1'b0;\n        end else begin\n            UART_Error <= rx_frame_error | rx_parity_error;\n        end\n    end\n\nendmodule\n\n// UART Transmitter Module\nmodule UART_transmitter #(\n    parameter PARITY_EN = 0,\n    parameter STOP_BITS = 1\n)(\n    input  logic       clk,\n    input  logic       rst,\n    input  logic       baud_tick,\n    input  logic       tx_start,\n    input  logic [7:0] data_in,\n    output logic       TX,\n    output logic       tx_ready,\n    output logic       tx_busy\n);\n\n    // State machine states\n    typedef enum logic [2:0] {\n        IDLE,\n        START_BIT,\n        DATA_BITS,\n        PARITY_BIT,\n        STOP_BIT\n    } tx_state_t;\n    \n    tx_state_t state, next_state;\n    logic [7:0] tx_data_reg;\n    logic [3:0] bit_counter;\n    logic [3:0] tick_counter;\n    logic parity_bit;\n    logic [1:0] stop_bit_counter;\n    \n    // Calculate parity\n    always_comb begin\n        if (PARITY_EN == 1) // Even parity\n            parity_bit = ^tx_data_reg;\n        else if (PARITY_EN == 2) // Odd parity\n            parity_bit = ~^tx_data_reg;\n        else\n            parity_bit = 1'b0;\n    end\n    \n    // State machine\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            state <= IDLE;\n            tx_data_reg <= 8'h00;\n            bit_counter <= 4'd0;\n            tick_counter <= 4'd0;\n            stop_bit_counter <= 2'd0;\n            TX <= 1'b1; // Idle high\n        end else begin\n            if (baud_tick) begin\n                case (state)\n                    IDLE: begin\n                        TX <= 1'b1;\n                        if (tx_start) begin\n                            tx_data_reg <= data_in;\n                            state <= START_BIT;\n                            tick_counter <= 4'd0;\n                        end\n                    end\n                    \n                    START_BIT: begin\n                        TX <= 1'b0; // Start bit\n                        if (tick_counter == 4'd15) begin\n                            state <= DATA_BITS;\n                            tick_counter <= 4'd0;\n                            bit_counter <= 4'd0;\n                        end else begin\n                            tick_counter <= tick_counter + 1'b1;\n                        end\n                    end\n                    \n                    DATA_BITS: begin\n                        TX <= tx_data_reg[bit_counter];\n                        if (tick_counter == 4'd15) begin\n                            tick_counter <= 4'd0;\n                            if (bit_counter == 4'd7) begin\n                                if (PARITY_EN != 0)\n                                    state <= PARITY_BIT;\n                                else\n                                    state <= STOP_BIT;\n                                stop_bit_counter <= 2'd0;\n                            end else begin\n                                bit_counter <= bit_counter + 1'b1;\n                            end\n                        end else begin\n                            tick_counter <= tick_counter + 1'b1;\n                        end\n                    end\n                    \n                    PARITY_BIT: begin\n                        TX <= parity_bit;\n                        if (tick_counter == 4'd15) begin\n                            state <= STOP_BIT;\n                            tick_counter <= 4'd0;\n                            stop_bit_counter <= 2'd0;\n                        end else begin\n                            tick_counter <= tick_counter + 1'b1;\n                        end\n                    end\n                    \n                    STOP_BIT: begin\n                        TX <= 1'b1; // Stop bit(s)\n                        if (tick_counter == 4'd15) begin\n                            tick_counter <= 4'd0;\n                            if (stop_bit_counter == STOP_BITS - 1) begin\n                                state <= IDLE;\n                            end else begin\n                                stop_bit_counter <= stop_bit_counter + 1'b1;\n                            end\n                        end else begin\n                            tick_counter <= tick_counter + 1'b1;\n                        end\n                    end\n                    \n                    default: state <= IDLE;\n                endcase\n            end\n        end\n    end\n    \n    // Output assignments\n    assign tx_ready = (state == IDLE);\n    assign tx_busy = (state != IDLE);\n\nendmodule\n\n// UART Receiver Module\nmodule UART_receiver #(\n    parameter PARITY_EN = 0,\n    parameter STOP_BITS = 1\n)(\n    input  logic       clk,\n    input  logic       rst,\n    input  logic       baud_tick,\n    input  logic       RX,\n    output logic [7:0] data_out,\n    output logic       rx_ready,\n    output logic       frame_error,\n    output logic       parity_error\n);\n\n    // State machine states\n    typedef enum logic [2:0] {\n        IDLE,\n        START_BIT,\n        DATA_BITS,\n        PARITY_BIT,\n        STOP_BIT\n    } rx_state_t;\n    \n    rx_state_t state;\n    logic [7:0] rx_data_reg;\n    logic [3:0] bit_counter;\n    logic [3:0] tick_counter;\n    logic rx_sync1, rx_sync2, rx_sync;\n    logic parity_bit_received;\n    logic parity_calculated;\n    \n    // Synchronize RX input (metastability protection)\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            rx_sync1 <= 1'b1;\n            rx_sync2 <= 1'b1;\n            rx_sync <= 1'b1;\n        end else begin\n            rx_sync1 <= RX;\n            rx_sync2 <= rx_sync1;\n            rx_sync <= rx_sync2;\n        end\n    end\n    \n    // Calculate expected parity\n    always_comb begin\n        if (PARITY_EN == 1) // Even parity\n            parity_calculated = ^rx_data_reg;\n        else if (PARITY_EN == 2) // Odd parity\n            parity_calculated = ~^rx_data_reg;\n        else\n            parity_calculated = 1'b0;\n    end\n    \n    // State machine\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            state <= IDLE;\n            rx_data_reg <= 8'h00;\n            bit_counter <= 4'd0;\n            tick_counter <= 4'd0;\n            rx_ready <= 1'b0;\n            frame_error <= 1'b0;\n            parity_error <= 1'b0;\n            data_out <= 8'h00;\n            parity_bit_received <= 1'b0;\n        end else begin\n            rx_ready <= 1'b0; // Default\n            \n            if (baud_tick) begin\n                case (state)\n                    IDLE: begin\n                        frame_error <= 1'b0;\n                        parity_error <= 1'b0;\n                        if (~rx_sync) begin // Start bit detected\n                            state <= START_BIT;\n                            tick_counter <= 4'd0;\n                        end\n                    end\n                    \n                    START_BIT: begin\n                        if (tick_counter == 4'd7) begin // Sample at middle\n                            if (~rx_sync) begin // Valid start bit\n                                tick_counter <= 4'd0;\n                                state <= DATA_BITS;\n                                bit_counter <= 4'd0;\n                            end else begin // False start bit\n                                state <= IDLE;\n                            end\n                        end else begin\n                            tick_counter <= tick_counter + 1'b1;\n                        end\n                    end\n                    \n                    DATA_BITS: begin\n                        if (tick_counter == 4'd15) begin // Sample at middle\n                            rx_data_reg[bit_counter] <= rx_sync;\n                            tick_counter <= 4'd0;\n                            if (bit_counter == 4'd7) begin\n                                if (PARITY_EN != 0)\n                                    state <= PARITY_BIT;\n                                else\n                                    state <= STOP_BIT;\n                            end else begin\n                                bit_counter <= bit_counter + 1'b1;\n                            end\n                        end else begin\n                            tick_counter <= tick_counter + 1'b1;\n                        end\n                    end\n                    \n                    PARITY_BIT: begin\n                        if (tick_counter == 4'd15) begin\n                            parity_bit_received <= rx_sync;\n                            state <= STOP_BIT;\n                            tick_counter <= 4'd0;\n                        end else begin\n                            tick_counter <= tick_counter + 1'b1;\n                        end\n                    end\n                    \n                    STOP_BIT: begin\n                        if (tick_counter == 4'd15) begin\n                            if (rx_sync) begin // Valid stop bit\n                                data_out <= rx_data_reg;\n                                rx_ready <= 1'b1;\n                                frame_error <= 1'b0;\n                                if (PARITY_EN != 0)\n                                    parity_error <= (parity_bit_received != parity_calculated);\n                                else\n                                    parity_error <= 1'b0;\n                            end else begin // Framing error\n                                frame_error <= 1'b1;\n                            end\n                            state <= IDLE;\n                        end else begin\n                            tick_counter <= tick_counter + 1'b1;\n                        end\n                    end\n                    \n                    default: state <= IDLE;\n                endcase\n            end\n        end\n    end\n\nendmodule\n```\n\nThis SystemVerilog UART driver implementation includes:\n\n1. **Configurable Parameters:**\n   - Clock frequency and baud rate\n   - Optional parity (none, even, or odd)\n   - Configurable stop bits (1 or 2)\n\n2. **Full-Duplex Operation:**\n   - Independent transmitter and receiver modules\n   - Shared baud rate generator with 16x oversampling\n\n3. **Key Features:**\n   - Metastability protection on RX input\n   - Frame error detection (invalid stop bit)\n   - Parity error detection (when enabled)\n   - Middle-of-bit sampling for reliable reception\n   - Ready/busy signaling for flow control\n\n4. **Interface Compliance:**\n   - All required input/output signals as specified\n   - Proper error handling and reporting\n   - Asynchronous reset support\n\nThe implementation follows the architecture described in the UART to Bus Core documentation, with a modular design that separates the baud rate generator, transmitter, and receiver functionality.",
    "prompt_1": "protocol and the second tests the binary protocol. The test bench uses a register file model to simulate write and read operations. The following table summarizes the synthesis results of the core for different FPGA families. ManufacturerFamilyDevice Device UtilizationElements UtilizationFmax XilinxSpartan 3xc3s50-5pq208 24.00%186 Slices>150MHz XilinxVirtex 5xc5vlx30-3ff324 2.00%111 Slices>200MHz AlteraCyclone IIIep3c5f256c6 5.00%255 LEs>200MHz AlteraStartix IIIep3sl50f484c2 <1%167 Registers 218 ALUTs>200MHz Lattice1MachXOLCMXO2280C- 4T144C10.00%116 Slices> 100MHz Table 1: Synthesis Results for Different FPGA Devices The above results where obtained using the following software versions: \u2022Xilinx ISE Webpack 11.4 \u2022Altera Quartus Web Edition 9.1sp2 NOTE: The UART to Bus core is not Wishbone compatible although modifying it for Wishbone is probably possible. 1Lattice device synthesis results provided by Paul V. Shatov. Results provided before adding bus request/grant mechanism. UART to Bus Core Specifications Page 4 of 10 February 25, 2012 3.Architecture The UART to Bus architecture is fairly simple. The core is includes a UART interface module, which includes both receive and transmit modules, and the command parser. The following figure depicts a block diagram of the core. Figure 1: UART to Bus Core Block Diagram The UART interface is based on an implementation found in the c16 project in OpenCores (http://www.opencores.org/project,c16 ). The interface includes a UART receive and transmit modules that share a single baud rate generator module. The baud rate is set using two constants defined at the core top module which are calculated as follows: D_BAUD_FREQ=16\u22c5BaudRate gcd\ue09eGlobalClockFreq,16\u2217BaudRate\ue09f D_BAUD_LIMIT=GlobalClockFreq gcd\ue09eGlobalClockFreq,16\u22c5BaudRate\ue09f\u2212D_BAUD_FREQ A short Scilab script which calculates the above parameters is added under the \u201cscilab\u201d directory with the core files. The interface between the \u201cuart_parser.v\u201d module and the \u201cuart_top.v\u201d is very simple and uses only five signals. For cases where the UART interface is not possible or another interface is preferred, the \u201cuart_parser.v\u201d module can be used as is with a different interface implementation. UART to Bus Core Specifications Page 5 of 10 uart_tx.v uart_rx.v baud_gen.vuart_top.v uart_parser.vuart2bus_top.v ser_out ser_inint_address int_wr_data16 8 int_write int_read int_rd_data 8 clock resetint_req int_gntFebruary 25, 2012 4.Operation This section describes the protocols used to access the internal bus from the UART interface. As mentioned above the parser supports two modes of operation: text & binary commands. To distinguish between the two protocols all binary commands start with a value of zero which will not be sent when using the text protocol. The following drawing depicts a simplified state machine of the parser. The figure does not include some transitions used to abort illegal command sequences. Figure 2: Parser State Diagram In the state diagram above the states on the right are used for the text mode protocol and the states on the left are used for the binary mode protocol. The following sub-sections describe each of the protocols. 4.1.Text Mode Protocol The text mode protocol includes only two commands: address read and address write. All values are in HEX format. The parser checks for both upper and lower characters, detects both space (0x20) and tab (0x09) as white spaces and both LF (0x0A) and CR (0x0D) as end of\nUART to Bus Core Specifications Written for publication on: File name: UART to Bus Core Specifications Version: 1.0 Creation Date: February 12, 2010 Update Date: February 25, 2012 Author: Moti Litochevski February 25, 2012 Table of Contents 1. Preface.............................................................................................................................................. 3 1.1. Scope........................................................................................................................................ 3 1.2. Revision History ....................................................................................................................... 3 1.3. Abbreviations........................................................................................................................... 3 2. Introduction...................................................................................................................................... 4 3. Architecture...................................................................................................................................... 5 4. Operation.......................................................................................................................................... 6 4.1. Text Mode Protocol .................................................................................................................. 6 4.2. Binary Mode Protocol .............................................................................................................. 7 5. Core Interfaces................................................................................................................................. 9 6. Test Bench Description .................................................................................................................. 10 Index of Tables Table 1: Synthesis Results for Different FPGA Devices ..................................................................... 4 Table 2: Text Protocol Read Command Format .................................................................................. 7 Table 3: Text Protocol Write Command Format ................................................................................. 7 Table 4: Binary Protocol Command Format ........................................................................................ 8 Table 5: Binary Protocol Return Message Format .............................................................................. 8 Table 6: Core Interfaces Description ................................................................................................... 9 Index of Figures Figure 1: UART to Bus Core Block Diagram ..................................................................................... 5 Figure 2: Parser State Diagram ............................................................................................................ 6 UART to Bus Core Specifications Page 2 of 10 February 25, 2012 1.Preface 1.1.Scope This document describes the UART to Bus IP core operation, architecture and interfaces. 1.2.Revision History RevDateAuthor Description 0.102/13/10Moti Litochevski First Draft 0.204/02/10Moti Litochevski Adding test bench description section 0.304/15/11Moti Litochevski Added Lattice MachXO device utilization provided by Paul V. Shatov. 1.002/25/12Moti Litochevski Updated interface description and synthesis results after adding bus request/grant mechanism. 1.3.Abbreviations UARTUniversal Asynchronous Receiver / Transmitter UART to Bus Core Specifications Page 3 of 10 February 25, 2012 2.Introduction The UART to Bus IP Core is a simple command parser that can be used to access an internal bus via a UART interface. This core can be used during initial board debugging or as a permanent solution when high speed interfaces are not required. The internal bus is designed with address bus of 16 bits and data bus of 8 bits. The core implements a very basic UART transmit & receive blocks which share a common baud rate generator and a command parser. The parser supports two modes of operation: text mode commands and binary mode commands. Text mode commands are designed to be used with a hyper terminal software and enable easy access to the internal bus. Binary mode commands are more efficient and also support buffered read & write operations with or without automatic address increment. The core was verified using Icarus Verilog simulator with two test benches: the first tests the text mode protocol and the second tests the binary protocol. The test bench uses a register file model to simulate write and read operations. The following table summarizes the synthesis results of the core for different FPGA families. ManufacturerFamilyDevice Device UtilizationElements UtilizationFmax XilinxSpartan 3xc3s50-5pq208 24.00%186 Slices>150MHz XilinxVirtex 5xc5vlx30-3ff324 2.00%111 Slices>200MHz AlteraCyclone IIIep3c5f256c6 5.00%255 LEs>200MHz AlteraStartix IIIep3sl50f484c2 <1%167 Registers 218 ALUTs>200MHz Lattice1MachXOLCMXO2280C- 4T144C10.00%116 Slices> 100MHz Table 1: Synthesis Results for Different FPGA Devices The above results where obtained using the following software versions: \u2022Xilinx ISE Webpack 11.4 \u2022Altera Quartus Web Edition 9.1sp2 NOTE: The UART to Bus core is not Wishbone compatible although\nbe written to. int_readoutput1An active high read control signal. This signal shall only be valid for a single clock cycle per address to be read from. int_rd_datainput8Data value read from address. This signal is sampled by the core on the next clock cycle following int_read signal active cycle. int_reqoutput1Internal bus access request signal. The core will assert this signal to request access to the internal bus before every bus access. This signal will be asserted until bus access is granted. int_gntinput1Internal bus grant signal. The core will release the request signal and execute the bus access when this signal is asserted. To disable bus request/grant mechanism set this to logic '1'. Table 6: Core Interfaces Description Note: The port direction in the table above is as defined in the core top module. UART to Bus Core Specifications Page 9 of 10 February 25, 2012 6.Test Bench Description The 'verilog\\bench' directory contains two test benches files and required tasks and modules. Compilation batch files are included in the 'verilog\\sim\\icarus' directory used to simulate the core using Icarus Verilog. The directory inclues two compilation batch files: one for binary mode protocol simulation and the second for text mode protocol simulation. The directory also includes batch file to run the simulation, 'run.bat', and another to call gtkwave to view the simulation VCD output file. Note that for binary mode protocol simulation the test bench reads the commands from 'test.bin' file also included in the directory. The file structure is straight forward and is explained in the respective test bench file. UART to Bus Core Specifications Page 10 of 10\nWrite a SystemVerilog module to implement a UART (Universal Asynchronous Receiver-Transmitter) controller. The module should support configurable baud rates, transmit and receive functionality, and proper start, data, parity (optional), and 2 stop bit handling. The UART should operate in full-duplex mode and adhere to the following interface:\nmodule UART_driver( input  logic       clk,        // System clock input  logic       rst,        // Asynchronous reset input  logic       UART_Start, // Signal to initiate transmission input  logic [8:0] data_in,    // Data to be transmitted input  logic       RX,         // UART receive line output logic       TX,         // UART transmit line output logic [8:0] data_out,   // Received data output logic       UART_Ready, // Ready to transmit next byte output logic       UART_Busy,  // Indicates UART is currently transmitting output logic       UART_Error  // High if framing or parity error detected ); ",
    "answer_1": "Based on the UART to Bus Core specifications document, I'll create a SystemVerilog UART controller module that implements the required functionality. This module will support configurable baud rates, full-duplex operation, and proper UART protocol handling.\n\n```systemverilog\nmodule UART_driver #(\n    parameter CLK_FREQ = 50000000,  // System clock frequency in Hz\n    parameter BAUD_RATE = 115200,   // Desired baud rate\n    parameter PARITY_EN = 0,        // 0: No parity, 1: Even parity, 2: Odd parity\n    parameter DATA_BITS = 8         // Number of data bits (typically 8)\n)(\n    input  logic       clk,         // System clock\n    input  logic       rst,         // Asynchronous reset\n    input  logic       UART_Start,  // Signal to initiate transmission\n    input  logic [8:0] data_in,     // Data to be transmitted\n    input  logic       RX,          // UART receive line\n    output logic       TX,          // UART transmit line\n    output logic [8:0] data_out,    // Received data\n    output logic       UART_Ready,  // Ready to transmit next byte\n    output logic       UART_Busy,   // Indicates UART is currently transmitting\n    output logic       UART_Error   // High if framing or parity error detected\n);\n\n    // Calculate baud rate divider parameters (based on document formula)\n    localparam integer BAUD_DIV = CLK_FREQ / (16 * BAUD_RATE);\n    localparam integer SAMPLE_RATE = 16;\n    \n    // Internal signals\n    logic [15:0] baud_counter;\n    logic        baud_tick;\n    logic        sample_tick;\n    \n    // Transmitter signals\n    logic [3:0]  tx_state;\n    logic [3:0]  tx_bit_count;\n    logic [8:0]  tx_shift_reg;\n    logic        tx_parity;\n    \n    // Receiver signals\n    logic [3:0]  rx_state;\n    logic [3:0]  rx_bit_count;\n    logic [8:0]  rx_shift_reg;\n    logic        rx_parity;\n    logic [3:0]  sample_count;\n    logic        rx_sync;\n    logic        rx_d1, rx_d2;\n    \n    // State definitions\n    typedef enum logic [3:0] {\n        IDLE    = 4'b0000,\n        START   = 4'b0001,\n        DATA    = 4'b0010,\n        PARITY  = 4'b0011,\n        STOP1   = 4'b0100,\n        STOP2   = 4'b0101,\n        ERROR   = 4'b0110\n    } uart_state_t;\n    \n    //=========================================================================\n    // Baud Rate Generator\n    //=========================================================================\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            baud_counter <= 16'd0;\n            baud_tick <= 1'b0;\n        end else begin\n            if (baud_counter == BAUD_DIV - 1) begin\n                baud_counter <= 16'd0;\n                baud_tick <= 1'b1;\n            end else begin\n                baud_counter <= baud_counter + 1'b1;\n                baud_tick <= 1'b0;\n            end\n        end\n    end\n    \n    // Generate sample tick (16x oversampling)\n    logic [3:0] sample_counter;\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            sample_counter <= 4'd0;\n            sample_tick <= 1'b0;\n        end else if (baud_tick) begin\n            sample_counter <= sample_counter + 1'b1;\n            sample_tick <= (sample_counter == 4'd0);\n        end else begin\n            sample_tick <= 1'b0;\n        end\n    end\n    \n    //=========================================================================\n    // Input Synchronization\n    //=========================================================================\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            rx_d1 <= 1'b1;\n            rx_d2 <= 1'b1;\n            rx_sync <= 1'b1;\n        end else begin\n            rx_d1 <= RX;\n            rx_d2 <= rx_d1;\n            rx_sync <= rx_d2;\n        end\n    end\n    \n    //=========================================================================\n    // UART Transmitter\n    //=========================================================================\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            TX <= 1'b1;\n            tx_state <= IDLE;\n            tx_bit_count <= 4'd0;\n            tx_shift_reg <= 9'd0;\n            UART_Ready <= 1'b1;\n            UART_Busy <= 1'b0;\n            tx_parity <= 1'b0;\n        end else begin\n            case (tx_state)\n                IDLE: begin\n                    TX <= 1'b1;\n                    UART_Ready <= 1'b1;\n                    UART_Busy <= 1'b0;\n                    if (UART_Start) begin\n                        tx_shift_reg <= data_in;\n                        tx_state <= START;\n                        UART_Ready <= 1'b0;\n                        UART_Busy <= 1'b1;\n                        tx_bit_count <= 4'd0;\n                        tx_parity <= (PARITY_EN == 2) ? 1'b1 : 1'b0; // Odd parity init\n                    end\n                end\n                \n                START: begin\n                    if (sample_tick) begin\n                        TX <= 1'b0; // Start bit\n                        tx_state <= DATA;\n                        tx_bit_count <= 4'd0;\n                    end\n                end\n                \n                DATA: begin\n                    if (sample_tick) begin\n                        TX <= tx_shift_reg[0];\n                        tx_shift_reg <= {1'b0, tx_shift_reg[8:1]};\n                        if (PARITY_EN != 0) begin\n                            tx_parity <= tx_parity ^ tx_shift_reg[0];\n                        end\n                        tx_bit_count <= tx_bit_count + 1'b1;\n                        if (tx_bit_count == DATA_BITS - 1) begin\n                            tx_state <= (PARITY_EN != 0) ? PARITY : STOP1;\n                        end\n                    end\n                end\n                \n                PARITY: begin\n                    if (sample_tick) begin\n                        TX <= tx_parity;\n                        tx_state <= STOP1;\n                    end\n                end\n                \n                STOP1: begin\n                    if (sample_tick) begin\n                        TX <= 1'b1; // First stop bit\n                        tx_state <= STOP2;\n                    end\n                end\n                \n                STOP2: begin\n                    if (sample_tick) begin\n                        TX <= 1'b1; // Second stop bit\n                        tx_state <= IDLE;\n                    end\n                end\n                \n                default: tx_state <= IDLE;\n            endcase\n        end\n    end\n    \n    //=========================================================================\n    // UART Receiver\n    //=========================================================================\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            rx_state <= IDLE;\n            rx_bit_count <= 4'd0;\n            rx_shift_reg <= 9'd0;\n            data_out <= 9'd0;\n            UART_Error <= 1'b0;\n            sample_count <= 4'd0;\n            rx_parity <= 1'b0;\n        end else begin\n            case (rx_state)\n                IDLE: begin\n                    UART_Error <= 1'b0;\n                    if (baud_tick && !rx_sync) begin // Start bit detected\n                        rx_state <= START;\n                        sample_count <= 4'd0;\n                        rx_bit_count <= 4'd0;\n                        rx_parity <= (PARITY_EN == 2) ? 1'b1 : 1'b0;\n                    end\n                end\n                \n                START: begin\n                    if (baud_tick) begin\n                        sample_count <= sample_count + 1'b1;\n                        if (sample_count == 4'd7) begin // Middle of start bit\n                            if (!rx_sync) begin // Valid start bit\n                                rx_state <= DATA;\n                                sample_count <= 4'd0;\n                            end else begin // False start\n                                rx_state <= IDLE;\n                            end\n                        end\n                    end\n                end\n                \n                DATA: begin\n                    if (baud_tick) begin\n                        sample_count <= sample_count + 1'b1;\n                        if (sample_count == 4'd15) begin // Sample at bit center\n                            rx_shift_reg <= {rx_sync, rx_shift_reg[8:1]};\n                            if (PARITY_EN != 0) begin\n                                rx_parity <= rx_parity ^ rx_sync;\n                            end\n                            rx_bit_count <= rx_bit_count + 1'b1;\n                            sample_count <= 4'd0;\n                            if (rx_bit_count == DATA_BITS - 1) begin\n                                rx_state <= (PARITY_EN != 0) ? PARITY : STOP1;\n                            end\n                        end\n                    end\n                end\n                \n                PARITY: begin\n                    if (baud_tick) begin\n                        sample_count <= sample_count + 1'b1;\n                        if (sample_count == 4'd15) begin\n                            if (rx_sync != rx_parity) begin\n                                UART_Error <= 1'b1; // Parity error\n                            end\n                            rx_state <= STOP1;\n                            sample_count <= 4'd0;\n                        end\n                    end\n                end\n                \n                STOP1: begin\n                    if (baud_tick) begin\n                        sample_count <= sample_count + 1'b1;\n                        if (sample_count == 4'd15) begin\n                            if (!rx_sync) begin\n                                UART_Error <= 1'b1; // Framing error\n                            end\n                            rx_state <= STOP2;\n                            sample_count <= 4'd0;\n                        end\n                    end\n                end\n                \n                STOP2: begin\n                    if (baud_tick) begin\n                        sample_count <= sample_count + 1'b1;\n                        if (sample_count == 4'd15) begin\n                            if (!rx_sync) begin\n                                UART_Error <= 1'b1; // Framing error\n                            end else if (!UART_Error) begin\n                                data_out <= rx_shift_reg; // Store received data\n                            end\n                            rx_state <= IDLE;\n                        end\n                    end\n                end\n                \n                default: rx_state <= IDLE;\n            endcase\n        end\n    end\n\nendmodule\n```\n\nThis SystemVerilog UART controller module implements:\n\n1. **Configurable Parameters**:\n   - Clock frequency and baud rate settings\n   - Optional parity support (none, even, or odd)\n   - Configurable data bits\n\n2. **Baud Rate Generation**:\n   - Uses the formula from the specification document\n   - 16x oversampling for reliable data reception\n   - Separate sample and baud ticks\n\n3. **Full-Duplex Operation**:\n   - Independent transmitter and receiver state machines\n   - Can transmit and receive simultaneously\n\n4. **Transmitter Features**:\n   - Start bit, data bits, optional parity, and 2 stop bits\n   - UART_Ready signal indicates when ready for next transmission\n   - UART_Busy signal indicates ongoing transmission\n\n5. **Receiver Features**:\n   - Input synchronization to prevent metastability\n   - Start bit detection and validation\n   - Center-bit sampling for reliable data reception\n   - Framing and parity error detection\n   - 2 stop bit verification\n\n6. **Error Handling**:\n   - Detects framing errors (invalid stop bits)\n   - Detects parity errors when parity is enabled\n   - UART_Error signal indicates any detected errors\n\nThe module follows the UART protocol as described in the specification document and provides a robust implementation suitable for FPGA deployment."
}
