{
    "prompt_0": "The SPI Master core consists of three parts shown in the following figure: Serial Interface spi_shift.v Clock generator spi_clgen.v sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 9 of 9 Appendix A Core configuration To meet specific system requirements and size constraints on behalf of the core functionality, the SPI Master core can be configuredby setting the appropriate define directives in the spi_defines.v source file. The directives are as follows: SPI_DIVIDER_BIT_NB This parameter defines the maximum number of bits needed for the divider. Set this parameter accordingly to the maximum system frequency and lowest serial clock frequency: \uf8fa \uf8fb\uf8f9 \uf8ef \uf8f0\uf8ee\u2212\u2217= 12log R_BIT_NB SPI_DIVIDE minmax 2 sclksys ff Default value is 16. SPI_MAX_CHAR This parameter defines the maximum number of bits that can be received/transmitted in one transfer. The default value is 32. SPI_SS_NB This parameter defines the number of slave select lines. The default value is 8.\nTable 8: Slave Select register Reset Value: 0x00000000 SS Writing 1 to any bit location of this field sets the proper ss_pad_o line to an active state. OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 6 of 9 4 Operation This core is an SPI and Microwire/Plus compliant synchronous serial controller. At the host side, it is controlled via registers accessible through a WISHBONE rev. B1 interface. 4.1 WISHBONE interface The SPI core has four 32-bit registers through the WISHBONE rev. B1 compatible interface. All accesses to SPI registers must be 32-bit (wb_sel[3:0] = 0xf). Please refer to the WISHBONE specification at http://www.opencores.org/wishbone/specs/wbspec_b1.pdf 4.2 Serial interface The serial interface consists of slave select lines, serial clock lines, as well as input and output data lines. All transfers are full duplex transfers of a programmable number of bits per transfer (up to 32 bits). Compared to the SPI/Microwire protocol, this core has some additional functionality. It can drive data to the output data line in respect to the falling (SPI/Microwire compliant) or rising edge of the serial clock, and it can latch data on an input data line on the rising (SPI/Microwire compliant) or falling edge of a serial clock line. It also can transmit (receive) the MSB first (SPI/Microwire compliant) or the LSB first. It is important to know that the Rx and Tx registers share the same flip-flops, which means that what is received from the input data line in one transfer will be transmitted on the output data line in the next transfer if no write access to the Tx register is executed between the transfers. /ss_pad_o[0] /ss_pad_o[1] /ss_pad_o[2] MASTER sclk_pad_o mosi_pad_o miso pad i MISO MOSI SCLK /SS SLAVE 0 MISO MOSI SCLK / SS SLAVE 1 MISO MOSI SCLK /SS SLAVE 2 WISHBONE MISO MOSI SCLK/SS SLAVE 0 MISO MOSI SCLK/SS SLAVE 1 MISO MOSI SCLK/SS SLAVE 2 WISHBON E /ss_pad_o[0]/ss_pad_o[1]/ss_pad_o[2] MASTER sclk_pad_o mosi_pad_o miso _pad_iOpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 7 of 9 ss_pad_o mosi_pad_o miso_pad_i CTRL[LSB] = 0, CTRL[CHAR_LEN] = 0x08, CTRL[TX_NEG] = 1, CTRL[RX_NEG] = 0 LSB (Tx[0])ss_pad_o mosi_pad_o miso_pad_i CTRL[LSB] = 1, CTRL[CHAR_LEN] = 0x0a, CTRL[TX_NEG] = 0, CTRL[RX_NEG] = 1 MSB (Tx[9]) MSB (Tx[7]) MSB (Rx[7])LSB (Tx[0]) LSB (Rx[0]) LSB (Rx[0])MSB (Rx[9]) sclk_pad_o sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 8 of 9 WHISHBONE SOC Bus WHISHBONE Interface spi_top.v ss_pad_o mosi_pad_o miso_pad_i 5 Architecture The SPI Master core consists of three parts shown in the following figure: Serial Interface spi_shift.v Clock generator spi_clgen.v sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 9 of 9 Appendix A Core configuration To meet specific system requirements and size constraints on behalf of the core functionality, the SPI Master core can be configuredby setting the appropriate define directives in the spi_defines.v source file. The directives are as follows: SPI_DIVIDER_BIT_NB This parameter defines the maximum number of bits needed for the divider. Set this parameter accordingly to the maximum system frequency and lowest serial clock frequency: \uf8fa\nSPI Master Core Specification Author: Simon Srot simons@opencores.org Rev. 0.2 July 12, 2002 OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.1 i Revision History Rev. Date Author Description 0.1 June 13, 2002 Simon Srot First Draft 0.2 July 12, 2002 Simon Srot Document is lectured. OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.1 ii ContentspenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 1 of 9 1 Introduction This document provides specifications for the SPI (Serial Peripheral Interface) Master core. Synchronous serial interfaces are widely used to provide economical board-level interfaces between different devices such as microcontrollers, DACs, ADCs and other. Although there is no single standard for a synchronous serial bus, there are industry-wide accepted guidelines based on two most popular implementations: \u2022 SPI (a trademark of Motorola Semiconductor) \u2022 Microwire/Plus (a trademark of National Semiconductor) Many IC manufacturers produce components that are compatible with SPI and Microwire/Plus. The SPI Master core is compatible with both above-mentioned protocols as master with some additional functionality. At the hosts side, the core acts like a WISHBONE compliant slave device. Features: \u2022 Full duplex synchronous serial data transfer \u2022 Variable length of transfer word up to 32 bits \u2022 MSB or LSB first data transfer \u2022 Rx and Tx on both rising or falling edge of serial clock independently \u2022 8 slave select lines \u2022 Fully static synchronous design with one clock domain \u2022 Technology independent Verilog \u2022 Fully synthesizable OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 2 of 9 2 IO ports 2.1 WISHBONE interface signals Port Width Direction Description wb_clk_i 1 Input Master clock wb_rst_i 1 Input Synchronous reset, active high wb_adr_i 5 Input Lower address bits wb_dat_i 32 Input Data towards the core wb_dat_o 32 Output Data from the core wb_sel_i 4 Input Byte select signals wb_we_i 1 Input Write enable input wb_stb_i 1 Input Strobe signal/Core select input wb_cyc_i 1 Input Valid bus cycle input wb_ack_o 1 Output Bus cycle acknowledge output wb_err_o 1 Output Bus cycle error output wb_int_o 1 Output Interrupt signal output Table 1: Wishbone interface signals All output WISHBONE signals are registered and driven on the rising edge of wb_clk_i. All input WISHBONE signals are latched on the rising edge of wb_clk_i. 2.2 SPI external connections Port Width Direction Description /ss_pad_o 8 Output Slave select output signals sclk_pad_o 1 Output Serial clock output mosi_pad_o 1 Output Master out slave in data signal output miso_pad_i 1 Input Master in slave out data signal input\nGenerate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=1 and CPHA=1. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out );\n",
    "answer_0": "Based on the specifications and requirements (CPOL=1, CPHA=1), here's a SystemVerilog SPI master driver implementation:\n\n```systemverilog\nmodule SPI_driver(\n    input  logic       clk,\n    input  logic       rst,\n    input  logic [7:0] data_in,\n    input  logic       SPI_MISO,\n    input  logic       SPI_start,\n    output logic       SPI_MOSI,\n    output logic       SPI_CLK,\n    output logic       SPI_EN,\n    output logic [7:0] data_out\n);\n\n    // State machine states\n    typedef enum logic [1:0] {\n        IDLE   = 2'b00,\n        LOAD   = 2'b01,\n        SHIFT  = 2'b10,\n        DONE   = 2'b11\n    } state_t;\n    \n    state_t current_state, next_state;\n    \n    // Internal registers\n    logic [7:0] tx_shift_reg;\n    logic [7:0] rx_shift_reg;\n    logic [3:0] bit_counter;\n    logic [3:0] clk_divider;\n    logic       sclk_int;\n    logic       transfer_done;\n    \n    // Clock divider for SPI clock generation\n    parameter CLK_DIV = 4'd4; // Adjust based on system clock to SPI clock ratio\n    \n    // State machine - sequential logic\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n    \n    // State machine - combinational logic\n    always_comb begin\n        next_state = current_state;\n        case (current_state)\n            IDLE: begin\n                if (SPI_start) begin\n                    next_state = LOAD;\n                end\n            end\n            \n            LOAD: begin\n                next_state = SHIFT;\n            end\n            \n            SHIFT: begin\n                if (transfer_done) begin\n                    next_state = DONE;\n                end\n            end\n            \n            DONE: begin\n                next_state = IDLE;\n            end\n            \n            default: next_state = IDLE;\n        endcase\n    end\n    \n    // Clock divider for SPI clock\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            clk_divider <= 4'd0;\n            sclk_int <= 1'b1; // CPOL=1, idle high\n        end else if (current_state == SHIFT) begin\n            if (clk_divider == CLK_DIV - 1) begin\n                clk_divider <= 4'd0;\n                sclk_int <= ~sclk_int;\n            end else begin\n                clk_divider <= clk_divider + 1'b1;\n            end\n        end else begin\n            clk_divider <= 4'd0;\n            sclk_int <= 1'b1; // CPOL=1, idle high\n        end\n    end\n    \n    // Bit counter\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            bit_counter <= 4'd0;\n        end else if (current_state == LOAD) begin\n            bit_counter <= 4'd0;\n        end else if (current_state == SHIFT && clk_divider == CLK_DIV - 1 && sclk_int == 1'b0) begin\n            // Count on falling edge of sclk when CPHA=1\n            bit_counter <= bit_counter + 1'b1;\n        end\n    end\n    \n    // Transfer done signal\n    assign transfer_done = (bit_counter == 4'd8);\n    \n    // Shift registers for TX and RX\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            tx_shift_reg <= 8'd0;\n            rx_shift_reg <= 8'd0;\n        end else begin\n            case (current_state)\n                LOAD: begin\n                    tx_shift_reg <= data_in;\n                    rx_shift_reg <= 8'd0;\n                end\n                \n                SHIFT: begin\n                    // CPHA=1: Sample on first edge (falling when CPOL=1), shift on second edge (rising)\n                    if (clk_divider == CLK_DIV - 1) begin\n                        if (sclk_int == 1'b1) begin\n                            // Falling edge of sclk - sample MISO\n                            rx_shift_reg <= {rx_shift_reg[6:0], SPI_MISO};\n                        end else begin\n                            // Rising edge of sclk - shift out next bit\n                            tx_shift_reg <= {tx_shift_reg[6:0], 1'b0};\n                        end\n                    end\n                end\n                \n                default: begin\n                    // Keep current values\n                end\n            endcase\n        end\n    end\n    \n    // Output data register\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            data_out <= 8'd0;\n        end else if (current_state == DONE) begin\n            data_out <= rx_shift_reg;\n        end\n    end\n    \n    // SPI output signals\n    assign SPI_CLK = (current_state == SHIFT) ? sclk_int : 1'b1; // CPOL=1\n    assign SPI_MOSI = tx_shift_reg[7]; // MSB first\n    assign SPI_EN = ~(current_state == SHIFT || current_state == LOAD); // Active low enable\n    \nendmodule\n```\n\nThis SPI master driver implementation includes:\n\n1. **CPOL=1, CPHA=1 Configuration**:\n   - Clock idles high (CPOL=1)\n   - Data is sampled on the first edge (falling edge) and shifted on the second edge (rising edge) when CPHA=1\n\n2. **State Machine**:\n   - IDLE: Waiting for SPI_start signal\n   - LOAD: Load data from data_in to shift register\n   - SHIFT: Perform 8-bit SPI transfer\n   - DONE: Transfer complete, update data_out\n\n3. **Clock Generation**:\n   - Divides system clock to generate SPI clock\n   - Adjustable via CLK_DIV parameter\n\n4. **Data Transfer**:\n   - MSB first transmission\n   - Full duplex operation (simultaneous TX and RX)\n   - 8-bit data width\n\n5. **Control Signals**:\n   - SPI_EN: Active low chip select\n   - SPI_CLK: SPI clock output\n   - SPI_MOSI: Master out, slave in data\n\nThe driver handles the complete SPI transaction automatically once SPI_start is asserted, and provides the received data on data_out when the transfer is complete.",
    "prompt_1": "The SPI Master core consists of three parts shown in the following figure: Serial Interface spi_shift.v Clock generator spi_clgen.v sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 9 of 9 Appendix A Core configuration To meet specific system requirements and size constraints on behalf of the core functionality, the SPI Master core can be configuredby setting the appropriate define directives in the spi_defines.v source file. The directives are as follows: SPI_DIVIDER_BIT_NB This parameter defines the maximum number of bits needed for the divider. Set this parameter accordingly to the maximum system frequency and lowest serial clock frequency: \uf8fa \uf8fb\uf8f9 \uf8ef \uf8f0\uf8ee\u2212\u2217= 12log R_BIT_NB SPI_DIVIDE minmax 2 sclksys ff Default value is 16. SPI_MAX_CHAR This parameter defines the maximum number of bits that can be received/transmitted in one transfer. The default value is 32. SPI_SS_NB This parameter defines the number of slave select lines. The default value is 8.\nTable 8: Slave Select register Reset Value: 0x00000000 SS Writing 1 to any bit location of this field sets the proper ss_pad_o line to an active state. OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 6 of 9 4 Operation This core is an SPI and Microwire/Plus compliant synchronous serial controller. At the host side, it is controlled via registers accessible through a WISHBONE rev. B1 interface. 4.1 WISHBONE interface The SPI core has four 32-bit registers through the WISHBONE rev. B1 compatible interface. All accesses to SPI registers must be 32-bit (wb_sel[3:0] = 0xf). Please refer to the WISHBONE specification at http://www.opencores.org/wishbone/specs/wbspec_b1.pdf 4.2 Serial interface The serial interface consists of slave select lines, serial clock lines, as well as input and output data lines. All transfers are full duplex transfers of a programmable number of bits per transfer (up to 32 bits). Compared to the SPI/Microwire protocol, this core has some additional functionality. It can drive data to the output data line in respect to the falling (SPI/Microwire compliant) or rising edge of the serial clock, and it can latch data on an input data line on the rising (SPI/Microwire compliant) or falling edge of a serial clock line. It also can transmit (receive) the MSB first (SPI/Microwire compliant) or the LSB first. It is important to know that the Rx and Tx registers share the same flip-flops, which means that what is received from the input data line in one transfer will be transmitted on the output data line in the next transfer if no write access to the Tx register is executed between the transfers. /ss_pad_o[0] /ss_pad_o[1] /ss_pad_o[2] MASTER sclk_pad_o mosi_pad_o miso pad i MISO MOSI SCLK /SS SLAVE 0 MISO MOSI SCLK / SS SLAVE 1 MISO MOSI SCLK /SS SLAVE 2 WISHBONE MISO MOSI SCLK/SS SLAVE 0 MISO MOSI SCLK/SS SLAVE 1 MISO MOSI SCLK/SS SLAVE 2 WISHBON E /ss_pad_o[0]/ss_pad_o[1]/ss_pad_o[2] MASTER sclk_pad_o mosi_pad_o miso _pad_iOpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 7 of 9 ss_pad_o mosi_pad_o miso_pad_i CTRL[LSB] = 0, CTRL[CHAR_LEN] = 0x08, CTRL[TX_NEG] = 1, CTRL[RX_NEG] = 0 LSB (Tx[0])ss_pad_o mosi_pad_o miso_pad_i CTRL[LSB] = 1, CTRL[CHAR_LEN] = 0x0a, CTRL[TX_NEG] = 0, CTRL[RX_NEG] = 1 MSB (Tx[9]) MSB (Tx[7]) MSB (Rx[7])LSB (Tx[0]) LSB (Rx[0]) LSB (Rx[0])MSB (Rx[9]) sclk_pad_o sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 8 of 9 WHISHBONE SOC Bus WHISHBONE Interface spi_top.v ss_pad_o mosi_pad_o miso_pad_i 5 Architecture The SPI Master core consists of three parts shown in the following figure: Serial Interface spi_shift.v Clock generator spi_clgen.v sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 9 of 9 Appendix A Core configuration To meet specific system requirements and size constraints on behalf of the core functionality, the SPI Master core can be configuredby setting the appropriate define directives in the spi_defines.v source file. The directives are as follows: SPI_DIVIDER_BIT_NB This parameter defines the maximum number of bits needed for the divider. Set this parameter accordingly to the maximum system frequency and lowest serial clock frequency: \uf8fa\nSPI Master Core Specification Author: Simon Srot simons@opencores.org Rev. 0.2 July 12, 2002 OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.1 i Revision History Rev. Date Author Description 0.1 June 13, 2002 Simon Srot First Draft 0.2 July 12, 2002 Simon Srot Document is lectured. OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.1 ii ContentspenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 1 of 9 1 Introduction This document provides specifications for the SPI (Serial Peripheral Interface) Master core. Synchronous serial interfaces are widely used to provide economical board-level interfaces between different devices such as microcontrollers, DACs, ADCs and other. Although there is no single standard for a synchronous serial bus, there are industry-wide accepted guidelines based on two most popular implementations: \u2022 SPI (a trademark of Motorola Semiconductor) \u2022 Microwire/Plus (a trademark of National Semiconductor) Many IC manufacturers produce components that are compatible with SPI and Microwire/Plus. The SPI Master core is compatible with both above-mentioned protocols as master with some additional functionality. At the hosts side, the core acts like a WISHBONE compliant slave device. Features: \u2022 Full duplex synchronous serial data transfer \u2022 Variable length of transfer word up to 32 bits \u2022 MSB or LSB first data transfer \u2022 Rx and Tx on both rising or falling edge of serial clock independently \u2022 8 slave select lines \u2022 Fully static synchronous design with one clock domain \u2022 Technology independent Verilog \u2022 Fully synthesizable OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 2 of 9 2 IO ports 2.1 WISHBONE interface signals Port Width Direction Description wb_clk_i 1 Input Master clock wb_rst_i 1 Input Synchronous reset, active high wb_adr_i 5 Input Lower address bits wb_dat_i 32 Input Data towards the core wb_dat_o 32 Output Data from the core wb_sel_i 4 Input Byte select signals wb_we_i 1 Input Write enable input wb_stb_i 1 Input Strobe signal/Core select input wb_cyc_i 1 Input Valid bus cycle input wb_ack_o 1 Output Bus cycle acknowledge output wb_err_o 1 Output Bus cycle error output wb_int_o 1 Output Interrupt signal output Table 1: Wishbone interface signals All output WISHBONE signals are registered and driven on the rising edge of wb_clk_i. All input WISHBONE signals are latched on the rising edge of wb_clk_i. 2.2 SPI external connections Port Width Direction Description /ss_pad_o 8 Output Slave select output signals sclk_pad_o 1 Output Serial clock output mosi_pad_o 1 Output Master out slave in data signal output miso_pad_i 1 Input Master in slave out data signal input\nGenerate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=1 and CPHA=0. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out );\n",
    "answer_1": "Based on the specification and your requirements for a SPI master driver with CPOL=1 and CPHA=0, here's the SystemVerilog implementation:\n\n```systemverilog\nmodule SPI_driver(\n    input logic clk,\n    input logic rst,\n    input logic [7:0] data_in,\n    input logic SPI_MISO,\n    input logic SPI_start,\n    output logic SPI_MOSI,\n    output logic SPI_CLK,\n    output logic SPI_EN,\n    output logic [7:0] data_out\n);\n\n    // State machine states\n    typedef enum logic [1:0] {\n        IDLE = 2'b00,\n        TRANSFER = 2'b01,\n        DONE = 2'b10\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Internal registers\n    logic [7:0] tx_shift_reg;\n    logic [7:0] rx_shift_reg;\n    logic [3:0] bit_counter;\n    logic [3:0] clk_divider;\n    logic sclk_int;\n    logic transfer_done;\n\n    // Clock divider parameter (adjust based on system clock)\n    parameter CLK_DIV = 4'd8;  // Divide by 8 for SPI clock\n\n    // CPOL = 1, CPHA = 0 configuration\n    // Clock idle high, sample on falling edge, shift on rising edge\n\n    // State machine - sequential logic\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // State machine - combinational logic\n    always_comb begin\n        next_state = current_state;\n        \n        case (current_state)\n            IDLE: begin\n                if (SPI_start) begin\n                    next_state = TRANSFER;\n                end\n            end\n            \n            TRANSFER: begin\n                if (transfer_done) begin\n                    next_state = DONE;\n                end\n            end\n            \n            DONE: begin\n                next_state = IDLE;\n            end\n            \n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Clock generation and divider\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            clk_divider <= 4'd0;\n            sclk_int <= 1'b1;  // CPOL = 1, idle high\n        end else if (current_state == TRANSFER) begin\n            if (clk_divider == CLK_DIV - 1) begin\n                clk_divider <= 4'd0;\n                sclk_int <= ~sclk_int;\n            end else begin\n                clk_divider <= clk_divider + 1'b1;\n            end\n        end else begin\n            clk_divider <= 4'd0;\n            sclk_int <= 1'b1;  // Return to idle high\n        end\n    end\n\n    // Bit counter\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            bit_counter <= 4'd0;\n            transfer_done <= 1'b0;\n        end else if (current_state == IDLE) begin\n            bit_counter <= 4'd0;\n            transfer_done <= 1'b0;\n        end else if (current_state == TRANSFER) begin\n            // Count on falling edge of sclk_int (CPHA = 0)\n            if (clk_divider == CLK_DIV - 1 && sclk_int == 1'b1) begin\n                if (bit_counter == 4'd7) begin\n                    transfer_done <= 1'b1;\n                end else begin\n                    bit_counter <= bit_counter + 1'b1;\n                end\n            end\n        end\n    end\n\n    // TX shift register\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            tx_shift_reg <= 8'd0;\n        end else if (current_state == IDLE && SPI_start) begin\n            tx_shift_reg <= data_in;  // Load data\n        end else if (current_state == TRANSFER) begin\n            // Shift on rising edge of sclk_int (CPHA = 0)\n            if (clk_divider == CLK_DIV - 1 && sclk_int == 1'b0) begin\n                tx_shift_reg <= {tx_shift_reg[6:0], 1'b0};  // MSB first\n            end\n        end\n    end\n\n    // RX shift register\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            rx_shift_reg <= 8'd0;\n        end else if (current_state == TRANSFER) begin\n            // Sample on falling edge of sclk_int (CPHA = 0)\n            if (clk_divider == CLK_DIV - 1 && sclk_int == 1'b1) begin\n                rx_shift_reg <= {rx_shift_reg[6:0], SPI_MISO};  // MSB first\n            end\n        end\n    end\n\n    // Data output register\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            data_out <= 8'd0;\n        end else if (current_state == DONE) begin\n            data_out <= rx_shift_reg;\n        end\n    end\n\n    // Output assignments\n    assign SPI_CLK = (current_state == TRANSFER) ? sclk_int : 1'b1;  // CPOL = 1\n    assign SPI_MOSI = tx_shift_reg[7];  // MSB first\n    assign SPI_EN = (current_state != IDLE);  // Active during transfer\n\nendmodule\n```\n\nThis SPI master driver implementation includes:\n\n1. **CPOL=1, CPHA=0 Configuration**:\n   - Clock idles high\n   - Data is sampled on the falling edge of SCK\n   - Data changes on the rising edge of SCK\n\n2. **State Machine**:\n   - IDLE: Waiting for SPI_start signal\n   - TRANSFER: Performing the 8-bit transfer\n   - DONE: Transfer complete, data_out updated\n\n3. **Clock Generation**:\n   - Configurable clock divider to generate SPI clock from system clock\n   - Maintains proper CPOL=1 idle state\n\n4. **Shift Registers**:\n   - TX shift register for outgoing data\n   - RX shift register for incoming data\n   - MSB-first transmission\n\n5. **Control Signals**:\n   - SPI_EN indicates active transfer\n   - SPI_CLK follows CPOL=1 specification\n   - SPI_MOSI outputs MSB of TX shift register\n\nThe module can be easily integrated into a larger system and the clock divider parameter can be adjusted based on your system clock frequency and desired SPI clock rate.",
    "prompt_2": "The SPI Master core consists of three parts shown in the following figure: Serial Interface spi_shift.v Clock generator spi_clgen.v sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 9 of 9 Appendix A Core configuration To meet specific system requirements and size constraints on behalf of the core functionality, the SPI Master core can be configuredby setting the appropriate define directives in the spi_defines.v source file. The directives are as follows: SPI_DIVIDER_BIT_NB This parameter defines the maximum number of bits needed for the divider. Set this parameter accordingly to the maximum system frequency and lowest serial clock frequency: \uf8fa \uf8fb\uf8f9 \uf8ef \uf8f0\uf8ee\u2212\u2217= 12log R_BIT_NB SPI_DIVIDE minmax 2 sclksys ff Default value is 16. SPI_MAX_CHAR This parameter defines the maximum number of bits that can be received/transmitted in one transfer. The default value is 32. SPI_SS_NB This parameter defines the number of slave select lines. The default value is 8.\nTable 8: Slave Select register Reset Value: 0x00000000 SS Writing 1 to any bit location of this field sets the proper ss_pad_o line to an active state. OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 6 of 9 4 Operation This core is an SPI and Microwire/Plus compliant synchronous serial controller. At the host side, it is controlled via registers accessible through a WISHBONE rev. B1 interface. 4.1 WISHBONE interface The SPI core has four 32-bit registers through the WISHBONE rev. B1 compatible interface. All accesses to SPI registers must be 32-bit (wb_sel[3:0] = 0xf). Please refer to the WISHBONE specification at http://www.opencores.org/wishbone/specs/wbspec_b1.pdf 4.2 Serial interface The serial interface consists of slave select lines, serial clock lines, as well as input and output data lines. All transfers are full duplex transfers of a programmable number of bits per transfer (up to 32 bits). Compared to the SPI/Microwire protocol, this core has some additional functionality. It can drive data to the output data line in respect to the falling (SPI/Microwire compliant) or rising edge of the serial clock, and it can latch data on an input data line on the rising (SPI/Microwire compliant) or falling edge of a serial clock line. It also can transmit (receive) the MSB first (SPI/Microwire compliant) or the LSB first. It is important to know that the Rx and Tx registers share the same flip-flops, which means that what is received from the input data line in one transfer will be transmitted on the output data line in the next transfer if no write access to the Tx register is executed between the transfers. /ss_pad_o[0] /ss_pad_o[1] /ss_pad_o[2] MASTER sclk_pad_o mosi_pad_o miso pad i MISO MOSI SCLK /SS SLAVE 0 MISO MOSI SCLK / SS SLAVE 1 MISO MOSI SCLK /SS SLAVE 2 WISHBONE MISO MOSI SCLK/SS SLAVE 0 MISO MOSI SCLK/SS SLAVE 1 MISO MOSI SCLK/SS SLAVE 2 WISHBON E /ss_pad_o[0]/ss_pad_o[1]/ss_pad_o[2] MASTER sclk_pad_o mosi_pad_o miso _pad_iOpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 7 of 9 ss_pad_o mosi_pad_o miso_pad_i CTRL[LSB] = 0, CTRL[CHAR_LEN] = 0x08, CTRL[TX_NEG] = 1, CTRL[RX_NEG] = 0 LSB (Tx[0])ss_pad_o mosi_pad_o miso_pad_i CTRL[LSB] = 1, CTRL[CHAR_LEN] = 0x0a, CTRL[TX_NEG] = 0, CTRL[RX_NEG] = 1 MSB (Tx[9]) MSB (Tx[7]) MSB (Rx[7])LSB (Tx[0]) LSB (Rx[0]) LSB (Rx[0])MSB (Rx[9]) sclk_pad_o sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 8 of 9 WHISHBONE SOC Bus WHISHBONE Interface spi_top.v ss_pad_o mosi_pad_o miso_pad_i 5 Architecture The SPI Master core consists of three parts shown in the following figure: Serial Interface spi_shift.v Clock generator spi_clgen.v sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 9 of 9 Appendix A Core configuration To meet specific system requirements and size constraints on behalf of the core functionality, the SPI Master core can be configuredby setting the appropriate define directives in the spi_defines.v source file. The directives are as follows: SPI_DIVIDER_BIT_NB This parameter defines the maximum number of bits needed for the divider. Set this parameter accordingly to the maximum system frequency and lowest serial clock frequency: \uf8fa\nSPI Master Core Specification Author: Simon Srot simons@opencores.org Rev. 0.2 July 12, 2002 OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.1 i Revision History Rev. Date Author Description 0.1 June 13, 2002 Simon Srot First Draft 0.2 July 12, 2002 Simon Srot Document is lectured. OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.1 ii ContentspenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 1 of 9 1 Introduction This document provides specifications for the SPI (Serial Peripheral Interface) Master core. Synchronous serial interfaces are widely used to provide economical board-level interfaces between different devices such as microcontrollers, DACs, ADCs and other. Although there is no single standard for a synchronous serial bus, there are industry-wide accepted guidelines based on two most popular implementations: \u2022 SPI (a trademark of Motorola Semiconductor) \u2022 Microwire/Plus (a trademark of National Semiconductor) Many IC manufacturers produce components that are compatible with SPI and Microwire/Plus. The SPI Master core is compatible with both above-mentioned protocols as master with some additional functionality. At the hosts side, the core acts like a WISHBONE compliant slave device. Features: \u2022 Full duplex synchronous serial data transfer \u2022 Variable length of transfer word up to 32 bits \u2022 MSB or LSB first data transfer \u2022 Rx and Tx on both rising or falling edge of serial clock independently \u2022 8 slave select lines \u2022 Fully static synchronous design with one clock domain \u2022 Technology independent Verilog \u2022 Fully synthesizable OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 2 of 9 2 IO ports 2.1 WISHBONE interface signals Port Width Direction Description wb_clk_i 1 Input Master clock wb_rst_i 1 Input Synchronous reset, active high wb_adr_i 5 Input Lower address bits wb_dat_i 32 Input Data towards the core wb_dat_o 32 Output Data from the core wb_sel_i 4 Input Byte select signals wb_we_i 1 Input Write enable input wb_stb_i 1 Input Strobe signal/Core select input wb_cyc_i 1 Input Valid bus cycle input wb_ack_o 1 Output Bus cycle acknowledge output wb_err_o 1 Output Bus cycle error output wb_int_o 1 Output Interrupt signal output Table 1: Wishbone interface signals All output WISHBONE signals are registered and driven on the rising edge of wb_clk_i. All input WISHBONE signals are latched on the rising edge of wb_clk_i. 2.2 SPI external connections Port Width Direction Description /ss_pad_o 8 Output Slave select output signals sclk_pad_o 1 Output Serial clock output mosi_pad_o 1 Output Master out slave in data signal output miso_pad_i 1 Input Master in slave out data signal input\nGenerate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=0 and CPHA=1. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out );\n",
    "answer_2": "Based on the specifications and requirements (CPOL=0, CPHA=1), here's a SystemVerilog SPI driver implementation:\n\n```systemverilog\nmodule SPI_driver(\n    input  logic       clk,\n    input  logic       rst,\n    input  logic [7:0] data_in,\n    input  logic       SPI_MISO,\n    input  logic       SPI_start,\n    output logic       SPI_MOSI,\n    output logic       SPI_CLK,\n    output logic       SPI_EN,\n    output logic [7:0] data_out\n);\n\n    // State machine states\n    typedef enum logic [1:0] {\n        IDLE   = 2'b00,\n        LOAD   = 2'b01,\n        SHIFT  = 2'b10,\n        DONE   = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Internal registers\n    logic [7:0] tx_shift_reg;\n    logic [7:0] rx_shift_reg;\n    logic [3:0] bit_counter;\n    logic [3:0] clk_divider;\n    logic       sclk_enable;\n    logic       sclk_reg;\n    \n    // Clock divider for SPI clock generation\n    parameter CLK_DIV = 4'd4; // Divide system clock by 4 for SPI clock\n\n    // State machine - sequential logic\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // State machine - combinational logic\n    always_comb begin\n        next_state = current_state;\n        \n        case (current_state)\n            IDLE: begin\n                if (SPI_start) begin\n                    next_state = LOAD;\n                end\n            end\n            \n            LOAD: begin\n                next_state = SHIFT;\n            end\n            \n            SHIFT: begin\n                if (bit_counter == 4'd0 && clk_divider == CLK_DIV-1) begin\n                    next_state = DONE;\n                end\n            end\n            \n            DONE: begin\n                next_state = IDLE;\n            end\n        endcase\n    end\n\n    // Clock divider for SPI clock generation\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            clk_divider <= 4'd0;\n            sclk_enable <= 1'b0;\n        end else if (current_state == SHIFT) begin\n            if (clk_divider == CLK_DIV-1) begin\n                clk_divider <= 4'd0;\n                sclk_enable <= 1'b1;\n            end else begin\n                clk_divider <= clk_divider + 1'b1;\n                sclk_enable <= 1'b0;\n            end\n        end else begin\n            clk_divider <= 4'd0;\n            sclk_enable <= 1'b0;\n        end\n    end\n\n    // SPI clock generation (CPOL=0)\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            sclk_reg <= 1'b0;\n        end else if (current_state == SHIFT) begin\n            if (sclk_enable) begin\n                sclk_reg <= ~sclk_reg;\n            end\n        end else begin\n            sclk_reg <= 1'b0; // CPOL=0, idle low\n        end\n    end\n\n    // Bit counter\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            bit_counter <= 4'd8;\n        end else if (current_state == LOAD) begin\n            bit_counter <= 4'd8;\n        end else if (current_state == SHIFT && sclk_enable && sclk_reg) begin\n            // Decrement on falling edge of SPI clock\n            bit_counter <= bit_counter - 1'b1;\n        end\n    end\n\n    // TX shift register and MOSI output (CPHA=1)\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            tx_shift_reg <= 8'd0;\n        end else if (current_state == LOAD) begin\n            tx_shift_reg <= data_in;\n        end else if (current_state == SHIFT && sclk_enable && sclk_reg) begin\n            // Shift on falling edge of SPI clock (CPHA=1)\n            tx_shift_reg <= {tx_shift_reg[6:0], 1'b0};\n        end\n    end\n\n    // RX shift register (CPHA=1)\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            rx_shift_reg <= 8'd0;\n        end else if (current_state == SHIFT && sclk_enable && !sclk_reg) begin\n            // Sample on rising edge of SPI clock (CPHA=1)\n            rx_shift_reg <= {rx_shift_reg[6:0], SPI_MISO};\n        end\n    end\n\n    // Data output register\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            data_out <= 8'd0;\n        end else if (current_state == DONE) begin\n            data_out <= rx_shift_reg;\n        end\n    end\n\n    // Output assignments\n    assign SPI_CLK = sclk_reg;\n    assign SPI_MOSI = tx_shift_reg[7]; // MSB first\n    assign SPI_EN = (current_state != IDLE); // Active during transmission\n\nendmodule\n```\n\nThis SPI driver implementation features:\n\n1. **CPOL=0, CPHA=1 Configuration**:\n   - Clock idles low (CPOL=0)\n   - Data is shifted out on falling edge and sampled on rising edge (CPHA=1)\n\n2. **State Machine**:\n   - IDLE: Waits for SPI_start signal\n   - LOAD: Loads data_in into transmit shift register\n   - SHIFT: Performs the 8-bit serial transfer\n   - DONE: Captures received data and returns to IDLE\n\n3. **Clock Generation**:\n   - Divides system clock to generate SPI clock\n   - Adjustable via CLK_DIV parameter\n\n4. **Data Transfer**:\n   - MSB first transmission\n   - Full duplex operation\n   - 8-bit data width\n\n5. **Control Signals**:\n   - SPI_EN active during transmission\n   - Proper timing for MOSI and MISO based on CPHA=1\n\nThe module is fully synchronous and uses the positive edge of the system clock for all sequential logic, making it suitable for FPGA implementation.",
    "prompt_3": "The SPI Master core consists of three parts shown in the following figure: Serial Interface spi_shift.v Clock generator spi_clgen.v sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 9 of 9 Appendix A Core configuration To meet specific system requirements and size constraints on behalf of the core functionality, the SPI Master core can be configuredby setting the appropriate define directives in the spi_defines.v source file. The directives are as follows: SPI_DIVIDER_BIT_NB This parameter defines the maximum number of bits needed for the divider. Set this parameter accordingly to the maximum system frequency and lowest serial clock frequency: \uf8fa \uf8fb\uf8f9 \uf8ef \uf8f0\uf8ee\u2212\u2217= 12log R_BIT_NB SPI_DIVIDE minmax 2 sclksys ff Default value is 16. SPI_MAX_CHAR This parameter defines the maximum number of bits that can be received/transmitted in one transfer. The default value is 32. SPI_SS_NB This parameter defines the number of slave select lines. The default value is 8.\nTable 8: Slave Select register Reset Value: 0x00000000 SS Writing 1 to any bit location of this field sets the proper ss_pad_o line to an active state. OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 6 of 9 4 Operation This core is an SPI and Microwire/Plus compliant synchronous serial controller. At the host side, it is controlled via registers accessible through a WISHBONE rev. B1 interface. 4.1 WISHBONE interface The SPI core has four 32-bit registers through the WISHBONE rev. B1 compatible interface. All accesses to SPI registers must be 32-bit (wb_sel[3:0] = 0xf). Please refer to the WISHBONE specification at http://www.opencores.org/wishbone/specs/wbspec_b1.pdf 4.2 Serial interface The serial interface consists of slave select lines, serial clock lines, as well as input and output data lines. All transfers are full duplex transfers of a programmable number of bits per transfer (up to 32 bits). Compared to the SPI/Microwire protocol, this core has some additional functionality. It can drive data to the output data line in respect to the falling (SPI/Microwire compliant) or rising edge of the serial clock, and it can latch data on an input data line on the rising (SPI/Microwire compliant) or falling edge of a serial clock line. It also can transmit (receive) the MSB first (SPI/Microwire compliant) or the LSB first. It is important to know that the Rx and Tx registers share the same flip-flops, which means that what is received from the input data line in one transfer will be transmitted on the output data line in the next transfer if no write access to the Tx register is executed between the transfers. /ss_pad_o[0] /ss_pad_o[1] /ss_pad_o[2] MASTER sclk_pad_o mosi_pad_o miso pad i MISO MOSI SCLK /SS SLAVE 0 MISO MOSI SCLK / SS SLAVE 1 MISO MOSI SCLK /SS SLAVE 2 WISHBONE MISO MOSI SCLK/SS SLAVE 0 MISO MOSI SCLK/SS SLAVE 1 MISO MOSI SCLK/SS SLAVE 2 WISHBON E /ss_pad_o[0]/ss_pad_o[1]/ss_pad_o[2] MASTER sclk_pad_o mosi_pad_o miso _pad_iOpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 7 of 9 ss_pad_o mosi_pad_o miso_pad_i CTRL[LSB] = 0, CTRL[CHAR_LEN] = 0x08, CTRL[TX_NEG] = 1, CTRL[RX_NEG] = 0 LSB (Tx[0])ss_pad_o mosi_pad_o miso_pad_i CTRL[LSB] = 1, CTRL[CHAR_LEN] = 0x0a, CTRL[TX_NEG] = 0, CTRL[RX_NEG] = 1 MSB (Tx[9]) MSB (Tx[7]) MSB (Rx[7])LSB (Tx[0]) LSB (Rx[0]) LSB (Rx[0])MSB (Rx[9]) sclk_pad_o sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 8 of 9 WHISHBONE SOC Bus WHISHBONE Interface spi_top.v ss_pad_o mosi_pad_o miso_pad_i 5 Architecture The SPI Master core consists of three parts shown in the following figure: Serial Interface spi_shift.v Clock generator spi_clgen.v sclk_pad_o OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 9 of 9 Appendix A Core configuration To meet specific system requirements and size constraints on behalf of the core functionality, the SPI Master core can be configuredby setting the appropriate define directives in the spi_defines.v source file. The directives are as follows: SPI_DIVIDER_BIT_NB This parameter defines the maximum number of bits needed for the divider. Set this parameter accordingly to the maximum system frequency and lowest serial clock frequency: \uf8fa\nSPI Master Core Specification Author: Simon Srot simons@opencores.org Rev. 0.2 July 12, 2002 OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.1 i Revision History Rev. Date Author Description 0.1 June 13, 2002 Simon Srot First Draft 0.2 July 12, 2002 Simon Srot Document is lectured. OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.1 ii ContentspenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 1 of 9 1 Introduction This document provides specifications for the SPI (Serial Peripheral Interface) Master core. Synchronous serial interfaces are widely used to provide economical board-level interfaces between different devices such as microcontrollers, DACs, ADCs and other. Although there is no single standard for a synchronous serial bus, there are industry-wide accepted guidelines based on two most popular implementations: \u2022 SPI (a trademark of Motorola Semiconductor) \u2022 Microwire/Plus (a trademark of National Semiconductor) Many IC manufacturers produce components that are compatible with SPI and Microwire/Plus. The SPI Master core is compatible with both above-mentioned protocols as master with some additional functionality. At the hosts side, the core acts like a WISHBONE compliant slave device. Features: \u2022 Full duplex synchronous serial data transfer \u2022 Variable length of transfer word up to 32 bits \u2022 MSB or LSB first data transfer \u2022 Rx and Tx on both rising or falling edge of serial clock independently \u2022 8 slave select lines \u2022 Fully static synchronous design with one clock domain \u2022 Technology independent Verilog \u2022 Fully synthesizable OpenCores SPI Master Core Specification 12.7.2002 www.opencores.org Rev 0.2 2 of 9 2 IO ports 2.1 WISHBONE interface signals Port Width Direction Description wb_clk_i 1 Input Master clock wb_rst_i 1 Input Synchronous reset, active high wb_adr_i 5 Input Lower address bits wb_dat_i 32 Input Data towards the core wb_dat_o 32 Output Data from the core wb_sel_i 4 Input Byte select signals wb_we_i 1 Input Write enable input wb_stb_i 1 Input Strobe signal/Core select input wb_cyc_i 1 Input Valid bus cycle input wb_ack_o 1 Output Bus cycle acknowledge output wb_err_o 1 Output Bus cycle error output wb_int_o 1 Output Interrupt signal output Table 1: Wishbone interface signals All output WISHBONE signals are registered and driven on the rising edge of wb_clk_i. All input WISHBONE signals are latched on the rising edge of wb_clk_i. 2.2 SPI external connections Port Width Direction Description /ss_pad_o 8 Output Slave select output signals sclk_pad_o 1 Output Serial clock output mosi_pad_o 1 Output Master out slave in data signal output miso_pad_i 1 Input Master in slave out data signal input\nGenerate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=0 and CPHA=0. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out );\n",
    "answer_3": "Based on the specifications provided and the requirements for a SPI Master driver with CPOL=0 and CPHA=0, here's a SystemVerilog implementation:\n\n```systemverilog\nmodule SPI_driver(\n    input  logic       clk,\n    input  logic       rst,\n    input  logic [7:0] data_in,\n    input  logic       SPI_MISO,\n    input  logic       SPI_start,\n    output logic       SPI_MOSI,\n    output logic       SPI_CLK,\n    output logic       SPI_EN,\n    output logic [7:0] data_out\n);\n\n    // State machine states\n    typedef enum logic [1:0] {\n        IDLE    = 2'b00,\n        LOAD    = 2'b01,\n        SHIFT   = 2'b10,\n        DONE    = 2'b11\n    } state_t;\n\n    state_t current_state, next_state;\n\n    // Internal registers\n    logic [7:0] shift_reg_tx;  // Transmit shift register\n    logic [7:0] shift_reg_rx;  // Receive shift register\n    logic [3:0] bit_counter;   // Count bits (0-7)\n    logic [3:0] clk_divider;   // Clock divider counter\n    logic       sclk_enable;   // Enable for generating SPI_CLK\n    logic       transfer_done; // Flag for transfer completion\n\n    // Clock divider parameter (adjust for desired SPI clock rate)\n    parameter CLK_DIV = 4'd8;  // Divide system clock by 8\n\n    // State machine - sequential logic\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            current_state <= IDLE;\n        end else begin\n            current_state <= next_state;\n        end\n    end\n\n    // State machine - combinational logic\n    always_comb begin\n        next_state = current_state;\n        \n        case (current_state)\n            IDLE: begin\n                if (SPI_start) begin\n                    next_state = LOAD;\n                end\n            end\n            \n            LOAD: begin\n                next_state = SHIFT;\n            end\n            \n            SHIFT: begin\n                if (transfer_done) begin\n                    next_state = DONE;\n                end\n            end\n            \n            DONE: begin\n                next_state = IDLE;\n            end\n            \n            default: next_state = IDLE;\n        endcase\n    end\n\n    // Clock divider for SPI clock generation\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            clk_divider <= 4'd0;\n            sclk_enable <= 1'b0;\n        end else if (current_state == SHIFT) begin\n            if (clk_divider == CLK_DIV - 1) begin\n                clk_divider <= 4'd0;\n                sclk_enable <= 1'b1;\n            end else begin\n                clk_divider <= clk_divider + 1'b1;\n                sclk_enable <= 1'b0;\n            end\n        end else begin\n            clk_divider <= 4'd0;\n            sclk_enable <= 1'b0;\n        end\n    end\n\n    // Bit counter\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            bit_counter <= 4'd0;\n        end else if (current_state == LOAD) begin\n            bit_counter <= 4'd0;\n        end else if (current_state == SHIFT && sclk_enable && ~SPI_CLK) begin\n            if (bit_counter == 4'd7) begin\n                bit_counter <= 4'd0;\n            end else begin\n                bit_counter <= bit_counter + 1'b1;\n            end\n        end\n    end\n\n    // Transfer done detection\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            transfer_done <= 1'b0;\n        end else if (current_state == SHIFT && bit_counter == 4'd7 && sclk_enable && ~SPI_CLK) begin\n            transfer_done <= 1'b1;\n        end else begin\n            transfer_done <= 1'b0;\n        end\n    end\n\n    // Shift registers for TX and RX\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            shift_reg_tx <= 8'd0;\n            shift_reg_rx <= 8'd0;\n        end else begin\n            case (current_state)\n                LOAD: begin\n                    shift_reg_tx <= data_in;\n                    shift_reg_rx <= 8'd0;\n                end\n                \n                SHIFT: begin\n                    if (sclk_enable) begin\n                        if (SPI_CLK) begin  // CPHA=0: Sample on rising edge\n                            shift_reg_rx <= {shift_reg_rx[6:0], SPI_MISO};\n                        end else begin      // CPHA=0: Shift on falling edge\n                            shift_reg_tx <= {shift_reg_tx[6:0], 1'b0};\n                        end\n                    end\n                end\n            endcase\n        end\n    end\n\n    // SPI Clock generation (CPOL=0: idle low)\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            SPI_CLK <= 1'b0;\n        end else if (current_state == SHIFT && sclk_enable) begin\n            SPI_CLK <= ~SPI_CLK;\n        end else begin\n            SPI_CLK <= 1'b0;  // CPOL=0: Clock idles low\n        end\n    end\n\n    // Output assignments\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            SPI_EN <= 1'b1;     // Active low chip select (idle high)\n            data_out <= 8'd0;\n        end else begin\n            case (current_state)\n                IDLE: begin\n                    SPI_EN <= 1'b1;  // Deassert chip select\n                end\n                \n                LOAD, SHIFT: begin\n                    SPI_EN <= 1'b0;  // Assert chip select (active low)\n                end\n                \n                DONE: begin\n                    SPI_EN <= 1'b1;  // Deassert chip select\n                    data_out <= shift_reg_rx;  // Latch received data\n                end\n            endcase\n        end\n    end\n\n    // MOSI output (MSB first)\n    assign SPI_MOSI = shift_reg_tx[7];\n\nendmodule\n```\n\nThis SPI Master driver implementation includes:\n\n**Key Features:**\n1. **CPOL=0, CPHA=0**: Clock idles low, data is captured on rising edge and shifted out on falling edge\n2. **State Machine**: Four states (IDLE, LOAD, SHIFT, DONE) for controlling the SPI transaction\n3. **Clock Divider**: Generates SPI clock from system clock with configurable division ratio\n4. **8-bit Transfer**: Transfers 8 bits MSB first\n5. **Full Duplex**: Simultaneous transmit and receive\n6. **Active Low Chip Select**: SPI_EN signal (equivalent to /SS)\n\n**Operation:**\n1. Assert `SPI_start` with valid `data_in` to initiate transfer\n2. State machine loads data and begins shifting\n3. Data is shifted out MSB first on MOSI while simultaneously capturing MISO\n4. After 8 bits, received data is available on `data_out`\n5. SPI_EN (chip select) is asserted low during the entire transaction\n\n**Timing (CPOL=0, CPHA=0):**\n- Clock idles low\n- Data changes on falling edge of SPI_CLK\n- Data is sampled on rising edge of SPI_CLK\n- First bit is available on MOSI when chip select goes low\n\nThe clock divider can be adjusted by changing the `CLK_DIV` parameter to achieve the desired SPI clock frequency relative to the system clock."
}
