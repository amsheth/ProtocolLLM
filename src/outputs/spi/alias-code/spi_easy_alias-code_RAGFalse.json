{
    "prompt_0": "Generate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=1 and CPHA=1. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out ); Please return code only. No sure here, or any text. ",
    "answer_0": "```systemverilog\nmodule SPI_driver(\n    input logic clk,\n    input logic rst,\n    input logic [7:0] data_in,\n    input logic SPI_MISO,\n    input logic SPI_start,\n    output logic SPI_MOSI,\n    output logic SPI_CLK,\n    output logic SPI_EN,\n    output logic [7:0] data_out\n);\n\n    parameter CPOL = 1;\n    parameter CPHA = 1;\n\n    logic [7:0] shift_reg;\n    logic [2:0] bit_cnt;\n    logic SPI_MOSI_reg;\n    logic SPI_CLK_reg;\n    logic SPI_EN_reg;\n\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            shift_reg <= 8'b0;\n            bit_cnt <= 3'b0;\n            SPI_MOSI_reg <= 1'b0;\n            SPI_CLK_reg <= 1'b0;\n            SPI_EN_reg <= 1'b0;\n            data_out <= 8'b0;\n        end else begin\n            if (SPI_start) begin\n                shift_reg <= data_in;\n                bit_cnt <= 3'b0;\n                SPI_EN_reg <= 1'b1;\n            end else if (SPI_EN_reg) begin\n                if (CPHA == 1) begin\n                    if (bit_cnt == 3'b0) begin\n                        SPI_MOSI_reg <= shift_reg[7];\n                        shift_reg <= {shift_reg[6:0], 1'b0};\n                    end else begin\n                        SPI_MOSI_reg <= shift_reg[7];\n                        shift_reg <= {shift_reg[6:0], SPI_MISO};\n                    end\n                end else begin\n                    if (bit_cnt == 3'b0) begin\n                        SPI_MOSI_reg <= shift_reg[7];\n                        shift_reg <= {shift_reg[6:0], SPI_MISO};\n                    end else begin\n                        SPI_MOSI_reg <= shift_reg[7];\n                        shift_reg <= {shift_reg[6:0], 1'b0};\n                    end\n                end\n                bit_cnt <= bit_cnt + 1;\n                if (bit_cnt == 3'b100) begin\n                    SPI_EN_reg <= 1'b0;\n                    data_out <= shift_reg;\n                end\n            end\n        end\n    end\n\n    assign SPI_MOSI = SPI_MOSI_reg;\n    assign SPI_CLK = SPI_CLK_reg;\n    assign SPI_EN = SPI_EN_reg;\n\nendmodule\n```",
    "prompt_1": "Generate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=1 and CPHA=0. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out ); Please return code only. No sure here, or any text. ",
    "answer_1": "```systemverilog\nmodule SPI_driver(\n    input logic clk,\n    input logic rst,\n    input logic [7:0] data_in,\n    input logic SPI_MISO,\n    input logic SPI_start,\n    output logic SPI_MOSI,\n    output logic SPI_CLK,\n    output logic SPI_EN,\n    output logic [7:0] data_out\n);\n\n    parameter CPOL = 1;\n    parameter CPHA = 0;\n\n    logic [7:0] shift_reg;\n    logic [2:0] bit_cnt;\n    logic SPI_MOSI_reg;\n    logic SPI_CLK_reg;\n    logic SPI_EN_reg;\n\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            shift_reg <= 8'b0;\n            bit_cnt <= 3'b0;\n            SPI_MOSI_reg <= 1'b0;\n            SPI_CLK_reg <= 1'b0;\n            SPI_EN_reg <= 1'b0;\n            data_out <= 8'b0;\n        end else begin\n            if (SPI_start) begin\n                shift_reg <= data_in;\n                bit_cnt <= 3'b0;\n                SPI_EN_reg <= 1'b1;\n            end else if (SPI_EN_reg) begin\n                if (CPHA == 0) begin\n                    if (bit_cnt < 3'b100) begin\n                        SPI_MOSI_reg <= shift_reg[7];\n                        shift_reg <= {shift_reg[6:0], SPI_MISO};\n                        bit_cnt <= bit_cnt + 1;\n                    end else begin\n                        data_out <= shift_reg;\n                        SPI_EN_reg <= 1'b0;\n                    end\n                end else begin\n                    if (bit_cnt < 3'b100) begin\n                        shift_reg <= {shift_reg[6:0], SPI_MISO};\n                        SPI_MOSI_reg <= shift_reg[7];\n                        bit_cnt <= bit_cnt + 1;\n                    end else begin\n                        data_out <= shift_reg;\n                        SPI_EN_reg <= 1'b0;\n                    end\n                end\n            end\n        end\n    end\n\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            SPI_CLK_reg <= CPOL;\n        end else begin\n            if (SPI_EN_reg) begin\n                SPI_CLK_reg <= ~SPI_CLK_reg;\n            end\n        end\n    end\n\n    assign SPI_MOSI = SPI_MOSI_reg;\n    assign SPI_CLK = SPI_CLK_reg;\n    assign SPI_EN = SPI_EN_reg;\n\nendmodule\n```",
    "prompt_2": "Generate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=0 and CPHA=1. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out ); Please return code only. No sure here, or any text. ",
    "answer_2": "```systemverilog\nmodule SPI_driver(\n    input logic clk,\n    input logic rst,\n    input logic [7:0] data_in,\n    input logic SPI_MISO,\n    input logic SPI_start,\n    output logic SPI_MOSI,\n    output logic SPI_CLK,\n    output logic SPI_EN,\n    output logic [7:0] data_out\n);\n\n    parameter CPOL = 0;\n    parameter CPHA = 1;\n\n    logic [7:0] shift_reg;\n    logic [2:0] bit_cnt;\n    logic SPI_MOSI_reg;\n    logic SPI_CLK_reg;\n    logic SPI_EN_reg;\n\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            shift_reg <= 8'b0;\n            bit_cnt <= 3'b0;\n            SPI_MOSI_reg <= 1'b0;\n            SPI_CLK_reg <= 1'b0;\n            SPI_EN_reg <= 1'b0;\n            data_out <= 8'b0;\n        end else begin\n            if (SPI_start) begin\n                shift_reg <= data_in;\n                bit_cnt <= 3'b0;\n                SPI_EN_reg <= 1'b1;\n            end else if (SPI_EN_reg) begin\n                if (CPHA == 0) begin\n                    if (bit_cnt == 3'b0) begin\n                        SPI_MOSI_reg <= shift_reg[7];\n                        shift_reg <= {shift_reg[6:0], 1'b0};\n                    end else begin\n                        SPI_MOSI_reg <= shift_reg[7];\n                        shift_reg <= {shift_reg[6:0], SPI_MISO};\n                    end\n                end else begin\n                    if (bit_cnt == 3'b0) begin\n                        SPI_MOSI_reg <= shift_reg[7];\n                        shift_reg <= {shift_reg[6:0], SPI_MISO};\n                    end else begin\n                        SPI_MOSI_reg <= shift_reg[7];\n                        shift_reg <= {shift_reg[6:0], 1'b0};\n                    end\n                end\n                bit_cnt <= bit_cnt + 1;\n                if (bit_cnt == 3'b100) begin\n                    SPI_EN_reg <= 1'b0;\n                    data_out <= shift_reg;\n                end\n            end\n        end\n    end\n\n    assign SPI_MOSI = SPI_MOSI_reg;\n    assign SPI_CLK = SPI_CLK_reg;\n    assign SPI_EN = SPI_EN_reg;\n\nendmodule\n```",
    "prompt_3": "Generate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=0 and CPHA=0. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out ); Please return code only. No sure here, or any text. ",
    "answer_3": "```systemverilog\nmodule SPI_driver(\n    input logic clk,\n    input logic rst,\n    input logic [7:0] data_in,\n    input logic SPI_MISO,\n    input logic SPI_start,\n    output logic SPI_MOSI,\n    output logic SPI_CLK,\n    output logic SPI_EN,\n    output logic [7:0] data_out\n);\n\n    parameter CPOL = 0;\n    parameter CPHA = 0;\n\n    logic [7:0] shift_reg;\n    logic [2:0] bit_cnt;\n    logic SPI_MOSI_reg;\n    logic SPI_CLK_reg;\n    logic SPI_EN_reg;\n\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            shift_reg <= 8'b0;\n            bit_cnt <= 3'b0;\n            SPI_MOSI_reg <= 1'b0;\n            SPI_CLK_reg <= 1'b0;\n            SPI_EN_reg <= 1'b0;\n            data_out <= 8'b0;\n        end else begin\n            if (SPI_start) begin\n                shift_reg <= data_in;\n                bit_cnt <= 3'b0;\n                SPI_EN_reg <= 1'b1;\n            end else if (SPI_EN_reg) begin\n                if (CPHA == 0) begin\n                    if (bit_cnt < 3'b100) begin\n                        SPI_MOSI_reg <= shift_reg[7];\n                        shift_reg <= {shift_reg[6:0], SPI_MISO};\n                        bit_cnt <= bit_cnt + 1;\n                    end else begin\n                        data_out <= shift_reg;\n                        SPI_EN_reg <= 1'b0;\n                    end\n                end else begin\n                    if (bit_cnt < 3'b100) begin\n                        shift_reg <= {shift_reg[6:0], SPI_MISO};\n                        SPI_MOSI_reg <= shift_reg[7];\n                        bit_cnt <= bit_cnt + 1;\n                    end else begin\n                        data_out <= shift_reg;\n                        SPI_EN_reg <= 1'b0;\n                    end\n                end\n            end\n        end\n    end\n\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            SPI_CLK_reg <= CPOL;\n        end else begin\n            if (SPI_EN_reg) begin\n                SPI_CLK_reg <= ~SPI_CLK_reg;\n            end\n        end\n    end\n\n    assign SPI_MOSI = SPI_MOSI_reg;\n    assign SPI_CLK = SPI_CLK_reg;\n    assign SPI_EN = SPI_EN_reg;\n\nendmodule\n```"
}
