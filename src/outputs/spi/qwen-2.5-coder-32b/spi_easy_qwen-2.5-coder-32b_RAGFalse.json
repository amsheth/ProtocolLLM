{
    "prompt_0": "Generate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=1 and CPHA=1. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out ); Please return code only. No sure here, or any text. ",
    "answer_0": "```systemverilog\nmodule SPI_driver(\n    input logic clk,\n    input logic rst,\n    input logic [7:0] data_in,\n    input logic SPI_MISO,\n    input logic SPI_start,\n    output logic SPI_MOSI,\n    output logic SPI_CLK,\n    output logic SPI_EN,\n    output logic [7:0] data_out\n);\n\n    localparam CPOL = 1;\n    localparam CPHA = 1;\n\n    logic [2:0] bit_cnt;\n    logic [7:0] shift_reg;\n    logic clk_div;\n    logic clk_div_reg;\n    logic spi_clk_int;\n    logic spi_clk_reg;\n    logic spi_en_int;\n    logic [7:0] data_out_reg;\n\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            clk_div_reg <= 0;\n            spi_clk_reg <= CPOL;\n            spi_en_int <= 0;\n            bit_cnt <= 0;\n            shift_reg <= 0;\n            data_out_reg <= 0;\n        end else begin\n            clk_div_reg <= ~clk_div_reg;\n            if (clk_div_reg) begin\n                spi_clk_reg <= ~spi_clk_reg;\n                if (spi_clk_reg == CPOL && spi_en_int) begin\n                    if (CPHA == 0) begin\n                        if (bit_cnt < 8) begin\n                            shift_reg <= {shift_reg[6:0], SPI_MISO};\n                            SPI_MOSI <= data_in[7-bit_cnt];\n                            bit_cnt <= bit_cnt + 1;\n                        end else begin\n                            data_out_reg <= shift_reg;\n                            spi_en_int <= 0;\n                        end\n                    end\n                end else if (spi_clk_reg != CPOL && spi_en_int) begin\n                    if (CPHA == 1) begin\n                        if (bit_cnt < 8) begin\n                            shift_reg <= {shift_reg[6:0], SPI_MISO};\n                            SPI_MOSI <= data_in[7-bit_cnt];\n                            bit_cnt <= bit_cnt + 1;\n                        end else begin\n                            data_out_reg <= shift_reg;\n                            spi_en_int <= 0;\n                        end\n                    end\n                end\n            end\n            if (SPI_start) begin\n                spi_en_int <= 1;\n                bit_cnt <= 0;\n                shift_reg <= 0;\n            end\n        end\n    end\n\n    assign clk_div = clk_div_reg;\n    assign SPI_CLK = spi_clk_reg;\n    assign SPI_EN = spi_en_int;\n    assign data_out = data_out_reg;\n\nendmodule\n```",
    "prompt_1": "Generate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=1 and CPHA=0. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out ); Please return code only. No sure here, or any text. ",
    "answer_1": "```systemverilog\nmodule SPI_driver(\n    input logic clk,\n    input logic rst,\n    input logic [7:0] data_in,\n    input logic SPI_MISO,\n    input logic SPI_start,\n    output logic SPI_MOSI,\n    output logic SPI_CLK,\n    output logic SPI_EN,\n    output logic [7:0] data_out\n);\n\n    // Parameters for SPI configuration\n    localparam CPOL = 1; // Clock Polarity\n    localparam CPHA = 0; // Clock Phase\n\n    // Internal signals\n    logic [2:0] bit_cnt; // Bit counter for 8-bit data\n    logic [7:0] shift_reg; // Shift register for data\n    logic clk_div; // Divided clock for SPI\n    logic clk_div_reg; // Registered clock for SPI\n    logic spi_clk_int; // Internal SPI clock\n    logic spi_clk_reg; // Registered SPI clock\n    logic spi_en_int; // Internal SPI enable\n    logic spi_en_reg; // Registered SPI enable\n    logic mosi_int; // Internal MOSI signal\n    logic mosi_reg; // Registered MOSI signal\n    logic miso_reg; // Registered MISO signal\n    logic start_reg; // Registered start signal\n\n    // Clock divider to generate SPI clock\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            clk_div <= 0;\n        end else begin\n            clk_div <= ~clk_div;\n        end\n    end\n\n    // Register the divided clock\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            clk_div_reg <= 0;\n        end else begin\n            clk_div_reg <= clk_div;\n        end\n    end\n\n    // Generate SPI clock based on CPOL\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            spi_clk_int <= CPOL;\n        end else if (clk_div_reg) begin\n            spi_clk_int <= ~spi_clk_int;\n        end\n    end\n\n    // Register the SPI clock\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            spi_clk_reg <= CPOL;\n        end else begin\n            spi_clk_reg <= spi_clk_int;\n        end\n    end\n\n    // Generate SPI enable signal\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            spi_en_int <= 0;\n        end else if (SPI_start) begin\n            spi_en_int <= 1;\n        end else if (bit_cnt == 3'b111) begin\n            spi_en_int <= 0;\n        end\n    end\n\n    // Register the SPI enable signal\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            spi_en_reg <= 0;\n        end else begin\n            spi_en_reg <= spi_en_int;\n        end\n    end\n\n    // Register the start signal\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            start_reg <= 0;\n        end else begin\n            start_reg <= SPI_start;\n        end\n    end\n\n    // SPI clock and enable outputs\n    assign SPI_CLK = spi_clk_reg;\n    assign SPI_EN = spi_en_reg;\n\n    // MOSI signal generation\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            mosi_int <= 0;\n        end else if (spi_en_int && (spi_clk_int == CPOL)) begin\n            mosi_int <= shift_reg[7];\n        end\n    end\n\n    // Register the MOSI signal\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            mosi_reg <= 0;\n        end else begin\n            mosi_reg <= mosi_int;\n        end\n    end\n\n    // Assign MOSI output\n    assign SPI_MOSI = mosi_reg;\n\n    // Shift register and bit counter\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            shift_reg <= 8'b0;\n            bit_cnt <= 3'b0;\n        end else if (spi_en_int && (spi_clk_int == CPOL)) begin\n            if (CPHA == 0) begin\n                shift_reg <= {shift_reg[6:0], SPI_MISO};\n                bit_cnt <= bit_cnt + 1;\n            end\n        end else if (spi_en_int && (spi_clk_int != CPOL)) begin\n            if (CPHA == 1) begin\n                shift_reg <= {shift_reg[6:0], SPI_MISO};\n                bit_cnt <= bit_cnt + 1;\n            end\n        end\n    end\n\n    // Register the MISO signal\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            miso_reg <= 0;\n        end else begin\n            miso_reg <= SPI_MISO;\n        end\n    end\n\n    // Output data register\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            data_out <= 8'b0;\n        end else if (bit_cnt == 3'b111 && spi_clk_int == CPOL) begin\n            data_out <= shift_reg;\n        end\n    end\n\nendmodule\n```",
    "prompt_2": "Generate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=0 and CPHA=1. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out ); Please return code only. No sure here, or any text. ",
    "answer_2": "```systemverilog\nmodule SPI_driver(\n    input logic clk,\n    input logic rst,\n    input logic [7:0] data_in,\n    input logic SPI_MISO,\n    input logic SPI_start,\n    output logic SPI_MOSI,\n    output logic SPI_CLK,\n    output logic SPI_EN,\n    output logic [7:0] data_out\n);\n\n    localparam CPOL = 0; // Clock Polarity\n    localparam CPHA = 1; // Clock Phase\n\n    logic [2:0] bit_cnt;\n    logic [7:0] shift_reg;\n    logic clk_div;\n    logic clk_div_reg;\n    logic clk_div_reg2;\n    logic mosi_reg;\n    logic miso_reg;\n    logic start_reg;\n    logic [7:0] data_out_reg;\n\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            clk_div_reg <= 0;\n            clk_div_reg2 <= 0;\n            bit_cnt <= 0;\n            shift_reg <= 0;\n            SPI_CLK <= CPOL;\n            SPI_MOSI <= 0;\n            SPI_EN <= 0;\n            data_out_reg <= 0;\n            start_reg <= 0;\n        end else begin\n            clk_div_reg <= ~clk_div_reg;\n            clk_div_reg2 <= clk_div_reg;\n            clk_div <= clk_div_reg ^ clk_div_reg2;\n\n            if (SPI_start && !start_reg) begin\n                bit_cnt <= 7;\n                shift_reg <= data_in;\n                SPI_EN <= 1;\n            end else if (SPI_EN) begin\n                if (clk_div) begin\n                    if (CPHA == 0) begin\n                        SPI_MOSI <= shift_reg[7];\n                    end else begin\n                        miso_reg <= SPI_MISO;\n                    end\n                end else begin\n                    if (CPHA == 1) begin\n                        SPI_MOSI <= shift_reg[7];\n                    end else begin\n                        miso_reg <= SPI_MISO;\n                    end\n\n                    if (bit_cnt > 0) begin\n                        shift_reg <= {shift_reg[6:0], miso_reg};\n                        bit_cnt <= bit_cnt - 1;\n                    end else begin\n                        SPI_EN <= 0;\n                        data_out_reg <= {shift_reg[6:0], miso_reg};\n                    end\n                end\n            end\n\n            start_reg <= SPI_start;\n        end\n    end\n\n    assign SPI_CLK = CPOL ^ clk_div;\n    assign SPI_MOSI = mosi_reg;\n    assign data_out = data_out_reg;\n\nendmodule\n```",
    "prompt_3": "Generate a SPI driver in system verilog with the following structure, and given that we want its parameters as CPOL=0 and CPHA=0. This SPI driver should be able to act as the master.. module SPI_driver( input logic clk, input logic rst, input logic [7:0] data_in, input logic SPI_MISO, Input logic SPI_start, output logic SPI_MOSI, output logic SPI_CLK, output logic SPI_EN, output logic [7:0] data_out ); Please return code only. No sure here, or any text. ",
    "answer_3": "```systemverilog\nmodule SPI_driver(\n    input logic clk,\n    input logic rst,\n    input logic [7:0] data_in,\n    input logic SPI_MISO,\n    input logic SPI_start,\n    output logic SPI_MOSI,\n    output logic SPI_CLK,\n    output logic SPI_EN,\n    output logic [7:0] data_out\n);\n\n    localparam CPOL = 0; // Clock Polarity\n    localparam CPHA = 0; // Clock Phase\n\n    logic [2:0] bit_cnt; // Bit counter for 8-bit data\n    logic [7:0] shift_reg; // Shift register for data\n    logic clk_div; // Divided clock for SPI\n    logic clk_div_reg; // Registered divided clock\n    logic spi_clk_int; // Internal SPI clock\n    logic spi_clk_reg; // Registered SPI clock\n    logic spi_en_int; // Internal SPI enable\n    logic [7:0] data_out_reg; // Registered output data\n\n    // Clock divider to generate SPI clock\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            clk_div_reg <= 1'b0;\n        end else begin\n            clk_div_reg <= ~clk_div_reg;\n        end\n    end\n\n    assign clk_div = clk_div_reg;\n\n    // SPI clock generation based on CPOL\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            spi_clk_reg <= CPOL;\n        end else begin\n            spi_clk_reg <= clk_div;\n        end\n    end\n\n    assign spi_clk_int = spi_clk_reg;\n\n    // SPI enable generation\n    always_ff @(posedge clk or posedge rst) begin\n        if (rst) begin\n            spi_en_int <= 1'b0;\n        end else if (SPI_start) begin\n            spi_en_int <= 1'b1;\n        end else if (bit_cnt == 3'b111) begin\n            spi_en_int <= 1'b0;\n        end\n    end\n\n    assign SPI_EN = spi_en_int;\n\n    // SPI clock and MOSI output\n    always_ff @(posedge spi_clk_int or posedge rst) begin\n        if (rst) begin\n            bit_cnt <= 3'b0;\n            shift_reg <= 8'b0;\n            SPI_MOSI <= 1'b0;\n            data_out_reg <= 8'b0;\n        end else if (spi_en_int) begin\n            if (CPHA == 0) begin // Leading edge sampling\n                if (bit_cnt == 3'b0) begin\n                    shift_reg <= data_in;\n                end\n                SPI_MOSI <= shift_reg[7];\n                shift_reg <= {1'b0, shift_reg[7:1]};\n                if (bit_cnt == 3'b111) begin\n                    data_out_reg <= {SPI_MISO, data_out_reg[7:1]};\n                end\n                bit_cnt <= bit_cnt + 1;\n            end else begin // Trailing edge sampling\n                SPI_MOSI <= shift_reg[7];\n                shift_reg <= {1'b0, shift_reg[7:1]};\n                if (bit_cnt == 3'b111) begin\n                    data_out_reg <= {SPI_MISO, data_out_reg[7:1]};\n                end\n                bit_cnt <= bit_cnt + 1;\n            end\n        end\n    end\n\n    assign SPI_CLK = spi_clk_int;\n    assign data_out = data_out_reg;\n\nendmodule\n```"
}
